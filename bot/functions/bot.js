// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ3: –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy"); // –î–æ–±–∞–≤–∏–ª–∏ webhookCallback
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
// (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤ Netlify!)
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –í–ù–ï —Ö–µ–Ω–¥–ª–µ—Ä–∞ ---
// –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö,
// —Ö–æ—Ç—è Netlify Functions –æ–±—ã—á–Ω–æ stateless. –ü–æ–ø—Ä–æ–±—É–µ–º.
let bot;
let supabaseAdmin;
let geminiModel;
let isBotInitialized = false; // –§–ª–∞–≥ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

function initializeClientsAndBot() {
    if (isBotInitialized) {
        console.log("[Bot Init] Already initialized.");
        return;
    }
    console.log("[Bot Init] Initializing clients and bot...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        console.error("[Bot Init] FATAL: Missing environment variables!");
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –ª—É—á—à–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Netlify Function —É–ø–∞–ª–∞
        throw new Error("Missing environment variables!");
    }
    try {
        supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥–µ–ª—å
        bot = new Bot(BOT_TOKEN);

        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
        console.log("[Bot Init] Setting up handlers...");

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        bot.command("start", async (ctx) => {
            // <<<--- –õ–û–ì –í–ù–£–¢–†–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---
            console.log("[Bot Handler /start] Command received in handler.");
            const userId = ctx.from?.id;
            if (!userId) { console.warn("[Bot Handler /start] No user ID in context."); return; }
            console.log(`[Bot Handler /start] Processing for User ${userId}`);
            try {
                await getOrCreateUser(supabaseAdmin, userId);
                console.log(`[Bot Handler /start] Ensured user ${userId} exists.`);
                const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π **–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω** –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
                const buttonUrl = `${TMA_URL}?action=claim_reward`;
                await ctx.replyWithMarkdown(welcomeMessage, {
                    reply_markup: { inline_keyboard: [[{ text: "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω", web_app: { url: buttonUrl } }]] }
                }).catch(logReplyError);
                 console.log(`[Bot Handler /start] Welcome message sent to ${userId}.`);
            } catch (e) {
                console.error("[Bot Handler /start] Error:", e);
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.on("message:text", async (ctx) => {
             // <<<--- –õ–û–ì –í–ù–£–¢–†–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---
            console.log("[Bot Handler message:text] Text message received in handler.");
            const dreamText = ctx.message.text;
            const userId = ctx.from?.id;
            if (!userId) { console.warn("[Bot Handler message:text] No user ID in context."); return; }
            if (dreamText.startsWith('/')) { console.log(`[Bot Handler message:text] Ignoring command: ${dreamText}`); return; }
            console.log(`[Bot Handler message:text] Processing dream for ${userId}`);
            // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
        bot.on('pre_checkout_query', async (ctx) => {
            console.log("[Bot Handler pre_checkout_query] Received:", JSON.stringify(ctx.preCheckoutQuery));
            try { await ctx.answerPreCheckoutQuery(true); console.log("[Bot Handler pre_checkout_query] Answered TRUE."); }
            catch (error) { console.error("[Bot Handler pre_checkout_query] Failed to answer:", error); try { await ctx.answerPreCheckoutQuery(false, "Internal error"); } catch (e) {} }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç RPC)
        bot.on('message:successful_payment', async (ctx) => {
             console.log("[Bot Handler successful_payment] Received:", JSON.stringify(ctx.message.successful_payment));
             const payment = ctx.message.successful_payment; const userId = ctx.from.id;
             const payload = payment.invoice_payload;
             if (!payload) { console.error(`[Bot Handler successful_payment] Missing payload for user ${userId}`); return; }
             const parts = payload.split('_');
             if (parts.length < 4 || parts[0] !== 'sub') { console.error(`[Bot Handler successful_payment] Invalid payload: ${payload} from user ${userId}`); return; }
             const plan = parts[1]; const durationMonths = parseInt(parts[2].replace('mo', ''), 10); const payloadUserId = parseInt(parts[3], 10);
             if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) { console.error(`[Bot Handler successful_payment] Payload error/mismatch: Payload=${payload}, Sender=${userId}`); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.").catch(logReplyError); return; }
             console.log(`[Bot Handler successful_payment] Processing payment for ${userId}: Plan=${plan}, Duration=${durationMonths}mo.`);
             try {
                 if (!supabaseAdmin) { throw new Error("Supabase client unavailable in payment handler"); }
                 const { error: txError } = await supabaseAdmin.rpc('process_successful_payment', { user_tg_id: userId, plan_type: plan, duration_months: durationMonths });
                 if (txError) { console.error(`[Bot Handler successful_payment] RPC error for ${userId}:`, txError); throw new Error("DB update failed."); }
                 console.log(`[Bot Handler successful_payment] Payment processed via RPC for ${userId}.`);
                 await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞. –¢–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã. ‚ú®`).catch(logReplyError);
             } catch (error) { console.error(`[Bot Handler successful_payment] Failed process payment for ${userId}:`, error); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.").catch(logReplyError); }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.catch((err) => {
            const ctx = err.ctx; const e = err.error;
            console.error(`[Bot Catch Handler] Error for update ${ctx?.update?.update_id}:`);
            if (e instanceof GrammyError) console.error("[Bot Catch Handler] GrammyError:", e.description, e.payload);
            else if (e instanceof HttpError) console.error("[Bot Catch Handler] HttpError:", e);
            else if (e instanceof Error) console.error("[Bot Catch Handler] Error:", e.stack || e.message);
            else console.error("[Bot Catch Handler] Unknown error:", e);
        });

        console.log("[Bot Init] Handlers configured.");
        isBotInitialized = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥

    } catch (initError) {
        console.error("[Bot Init] FATAL: Initialization failed:", initError instanceof Error ? initError.stack : initError);
        // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã handler –±—É–¥—É—Ç –ø–∞–¥–∞—Ç—å
        isBotInitialized = false; // –û—Å—Ç–∞–≤–ª—è–µ–º false
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã Netlify –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞,
        // –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Ñ–∞—Ç–∞–ª—å–Ω—É—é.
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏
initializeClientsAndBot();

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
// getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError
// (–ò—Ö –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö)
async function getOrCreateUser(supabase, userId) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
async function getGeminiAnalysis(geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
async function analyzeDream(ctx, supabase, geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }


// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
    if (!isBotInitialized || !bot) {
         console.error("[Netlify Handler] Bot not initialized! Check initialization logs.");
         // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É?
         // –õ—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
         return { statusCode: 500, body: "Internal Server Error: Bot initialization failed." };
    }

    try {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if (!event.body) { console.warn("[Netlify Handler] Empty event body."); return { statusCode: 400, body: "Bad Request: Empty body" }; }
        const update = JSON.parse(event.body);
        console.log("[Netlify Handler] Received update, passing to bot.handleUpdate...");

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ grammY
        await bot.handleUpdate(update);
        console.log("[Netlify Handler] bot.handleUpdate finished successfully.");

        // –ï—Å–ª–∏ grammY —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        return { statusCode: 200, body: "" };

    } catch (error) {
         // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–ª–∏ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –æ—à–∏–±–∫–∏ –∏–∑ bot.handleUpdate,
         // –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã —á–µ—Ä–µ–∑ bot.catch (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        console.error("[Netlify Handler] CRITICAL error during update processing:", error instanceof Error ? error.stack : error);
        return { statusCode: 500, body: "Internal Server Error during update processing." };
    }
};
