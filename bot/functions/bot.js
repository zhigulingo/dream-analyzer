// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤) ---
let supabaseAdmin;
let geminiModel;
let botInstance; // –•—Ä–∞–Ω–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–¥–µ—Å—å

// --- –§—É–Ω–∫—Ü–∏—è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏) ---
function initializeClients() {
    let initError = false;
    console.log("Initializing clients...");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (!BOT_TOKEN) {
        console.error("FATAL: BOT_TOKEN is missing!");
        initError = true;
    }
    if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
        console.error("FATAL: Supabase URL or Service Key is missing!");
        initError = true;
    }
    if (!GEMINI_API_KEY) {
        console.error("FATAL: GEMINI_API_KEY is missing!");
        initError = true;
    }
    if (!TMA_URL) {
        console.warn("Warning: TMA_URL is missing. Inline buttons might not work.");
        // –ù–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    try {
        if (SUPABASE_URL && SUPABASE_SERVICE_KEY) {
            supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
                auth: { autoRefreshToken: false, persistSession: false }
            });
            console.log("Supabase Admin Client initialized.");
        } else {
             throw new Error("Missing Supabase credentials for client creation.");
        }
    } catch (e) {
        console.error("FATAL: Failed to initialize Supabase client:", e);
        initError = true;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
    try {
        if (GEMINI_API_KEY) {
            const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
            geminiModel = genAI.getGenerativeModel({ model: "gemini-pro" });
            console.log("Gemini Client initialized (model gemini-pro).");
        } else {
            throw new Error("Missing Gemini API Key for client creation.");
        }
    } catch (e) {
        console.error("FATAL: Failed to initialize Gemini client:", e);
        initError = true;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    try {
        if (BOT_TOKEN && !initError) { // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            botInstance = new Bot(BOT_TOKEN);
            console.log("Grammy Bot instance created.");
            // –ù–∞—Å—Ç—Ä–æ–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å
            setupBotHandlers(botInstance);
        } else if (!BOT_TOKEN) {
             throw new Error("BOT_TOKEN is missing, cannot create bot instance.");
        } else {
             throw new Error("Cannot create bot instance due to previous initialization errors.");
        }
    } catch(e) {
        console.error("FATAL: Failed to create Bot instance:", e);
        initError = true;
    }

    if (initError) {
        console.error("Initialization failed. Bot may not function correctly.");
        // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Netlify –ø–æ–∫–∞–∑–∞–ª —Å–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        // throw new Error("Client initialization failed.");
    } else {
        console.log("All clients initialized successfully.");
    }
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

async function getOrCreateUser(userId) {
    if (!supabaseAdmin) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabaseAdmin
            .from('users')
            .select('id')
            .eq('tg_id', userId)
            .single();

        if (selectError && selectError.code !== 'PGRST116') throw selectError; // Re-throw other errors

        if (existingUser) {
            return existingUser.id;
        } else {
            const { data: newUser, error: insertError } = await supabaseAdmin
                .from('users')
                .insert({ tg_id: userId, subscription_type: 'free', tokens: 1 })
                .select('id')
                .single();
            if (insertError) throw insertError;
            if (!newUser) throw new Error("User creation returned no data.");
            console.log(`Created new user: tg_id=${userId}, id=${newUser.id}`);
            return newUser.id;
        }
    } catch (error) {
        console.error(`Error in getOrCreateUser for ${userId}:`, error.message);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å
    }
}

async function getGeminiAnalysis(dreamText) {
    if (!geminiModel) throw new Error("Gemini client not available in getGeminiAnalysis.");
    const MAX_DREAM_LENGTH = 4000; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;

    try {
        console.log("Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
        const result = await geminiModel.generateContent(prompt);
        const response = result.response;

        if (response.promptFeedback?.blockReason) {
            console.warn(`Gemini blocked: ${response.promptFeedback.blockReason}`);
            return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.`;
        }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) {
            console.error("Gemini returned empty response.");
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).";
        }
        console.log("Gemini analysis received.");
        return analysisText;
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
}

async function analyzeDream(ctx, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError);
        return;
    }
    if (!supabaseAdmin) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
         await ctx.reply("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.").catch(logReplyError);
         return;
    }

    let userDbId;
    let processingMessage; // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userDbId = await getOrCreateUser(userId);
        if (!userDbId) {
            await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(logReplyError);
            return;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ RPC
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabaseAdmin
            .rpc('decrement_token_if_available', { user_tg_id: userId });

        if (rpcError) throw new Error(`RPC Error: ${rpcError.message}`); // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É RPC
        if (!tokenDecremented) {
            if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(logReplyError);
            await ctx.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError);
            return;
        }

        // 3. –í—ã–∑—ã–≤–∞–µ–º Gemini (–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if (processingMessage) {
            await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
        } else {
             await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
        }

        const analysisResult = await getGeminiAnalysis(dreamText);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        if (processingMessage) {
             await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message:", e));
             processingMessage = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å —Å–Ω–æ–≤–∞ –≤ –±–ª–æ–∫–µ catch
        }

        const isErrorResult = !analysisResult || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));

        if (isErrorResult) {
            await ctx.reply(analysisResult || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑.").catch(logReplyError);
            console.warn(`Analysis for ${userId} failed/blocked, token consumed.`);
            // TODO: –ü–æ–¥—É–º–∞—Ç—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ blockReason?
            return;
        }

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        const { error: insertError } = await supabaseAdmin
            .from('analyses')
            .insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });

        if (insertError) {
            console.error(`Error saving analysis for user_id ${userDbId}:`, insertError);
            // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await ctx.reply("–°–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é. –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + analysisResult).catch(logReplyError);
            return;
        }

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log(`Analysis for ${userId} successful.`);
        await ctx.reply(`–í–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞:\n\n${analysisResult}\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`, {
            reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
        }).catch(logReplyError);

    } catch (error) {
        console.error(`Critical error in analyzeDream for ${userId}:`, error);
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é" –µ—â–µ –≤–∏—Å–∏—Ç –∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–¥–∞–ª–∏–º –µ–≥–æ
         if (processingMessage) {
             await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message on error:", e));
         }
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–Ω–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.").catch(logReplyError);
    }
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ë–æ—Ç–∞ ---
function setupBotHandlers(bot) {
    if (!bot) return;

    // /start
    bot.command("start", async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;
        console.log(`User ${userId} started bot.`);
        try {
            await getOrCreateUser(userId); // Ensure user exists
            await ctx.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –°–Ω–æ–≤! ‚ú®\n\n" +
                "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ —Ä–∞—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å (—É –≤–∞—Å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑).\n\n" +
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤ üëá", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError);
        } catch (e) {
            console.error("Error in /start handler:", e);
            await ctx.reply("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError);
        }
    });

    // Text messages
    bot.on("message:text", async (ctx) => {
        const dreamText = ctx.message.text;
        const userId = ctx.from?.id;
        if (!userId) return;
        if (dreamText.startsWith('/')) {
            console.log(`Ignoring command: ${dreamText}`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            // await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.").catch(logReplyError);
            return;
        }
        console.log(`Received text from ${userId}: "${dreamText.substring(0, 50)}..."`);
        await analyzeDream(ctx, dreamText);
    });

    // Error handler
    bot.catch((err) => {
        const ctx = err.ctx;
        const e = err.error;
        console.error(`Error while handling update ${ctx.update.update_id}:`);
        if (e instanceof GrammyError) {
            console.error("Error in request:", e.description);
        } else if (e instanceof HttpError) {
            console.error("Could not contact Telegram:", e);
        } else if (e instanceof Error) { // –õ–æ–≤–∏–º –Ω–∞—à–∏ –æ—à–∏–±–∫–∏ –∏ –æ—à–∏–±–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
             console.error("Unhandled error:", e.stack || e.message);
        } else {
            console.error("Unknown error object:", e);
        }
        // –í–∞–∂–Ω–æ: –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ bot.catch, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    });

    console.log("Bot handlers configured.");
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Reply ---
function logReplyError(error) {
    console.error("Failed to send message to Telegram:", error);
}

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –∏ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ "—Ö–æ–ª–æ–¥–Ω–æ–º" —Å—Ç–∞—Ä—Ç–µ
        // –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö "—Ç–µ–ø–ª—ã—Ö" –≤—ã–∑–æ–≤–∞—Ö –æ–Ω–∏ —É–∂–µ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!botInstance) {
            console.log("Cold start: Initializing clients and bot...");
            initializeClients();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!botInstance) {
             console.error("Handler called but bot instance is still not available after initialization!");
             return { statusCode: 500, body: "Internal Server Error: Bot initialization failed" };
        }

        if (!event.body) {
            console.warn("Handler called without event body.");
            return { statusCode: 400, body: "Bad Request: Missing event body" };
        }

        // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        let update;
        try {
             update = JSON.parse(event.body);
        } catch (e) {
             console.error("Failed to parse event body:", e);
             return { statusCode: 400, body: "Bad Request: Invalid JSON" };
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ grammy
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º await bot.handleUpdate(), —Ç.–∫. –Ω–∞–º –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å 200 OK –¢–µ–ª–µ–≥—Ä–∞–º—É
        // grammy –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        botInstance.handleUpdate(update).catch((err) => {
             // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ *–ø–æ—Å–ª–µ* –æ—Ç–≤–µ—Ç–∞ 200 OK
             console.error("Async error during update processing:", err);
        });

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        return { statusCode: 200, body: "" };

    } catch (error) {
        // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ *–¥–æ* –∏–ª–∏ *–≤–æ –≤—Ä–µ–º—è* –≤—ã–∑–æ–≤–∞ handleUpdate (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏)
        console.error("Error in Netlify handler:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 500, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å Telegram –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        return { statusCode: 500, body: "Internal Server Error" };
    }
};

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
// –≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç)
initializeClients();
console.log("Netlify function bot.js loaded and initial client setup triggered.");
