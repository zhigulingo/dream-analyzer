// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ7: –†—É—á–Ω–æ–π handler + bot.init())

const { Bot, Api, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto'); // –û—Å—Ç–∞–≤–∏–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω—É–∂–¥

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
    console.error("[Bot Global Init] FATAL: Missing one or more environment variables!");
    // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ–ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    throw new Error("Missing critical environment variables. Function cannot start.");
}

// --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–ª–∏–µ–Ω—Ç–æ–≤ ---
// (–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
console.log("[Bot Global Init] Initializing clients and bot instance...");
let supabaseAdmin;
let genAI;
let geminiModel = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ null
let bot;
let initializationError = null;

try {
    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä genAI
    // –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º geminiModel –∑–¥–µ—Å—å, —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ getGeminiAnalysis
    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Clients and bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (–° —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received.");
        const userId = ctx.from?.id;
        const chatId = ctx.chat.id;
        if (!userId || !chatId) { console.warn("[Bot Handler /start] No user ID or chat ID."); return; }
        console.log(`[Bot Handler /start] User ${userId} in chat ${chatId}`);
        let userData;
        try {
            userData = await getOrCreateUser(supabaseAdmin, userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π supabaseAdmin
            if (!userData || !userData.id) throw new Error("Failed to retrieve user data.");
            console.log(`[Bot Handler /start] User data: ID=${userData.id}, Claimed=${userData.claimed}, LastMsgId=${userData.lastMessageId}`);
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (userData.lastMessageId) {
                console.log(`[Bot Handler /start] Attempting to delete previous message ${userData.lastMessageId}`);
                await ctx.api.deleteMessage(chatId, userData.lastMessageId).catch(async (deleteError) => {
                    if (deleteError instanceof GrammyError && (deleteError.error_code === 400 && deleteError.description.includes("message to delete not found"))) {
                        console.log(`[Bot Handler /start] Previous message ${userData.lastMessageId} not found.`);
                        const { error: resetError } = await supabaseAdmin.from('users').update({ last_start_message_id: null }).eq('id', userData.id);
                        if (resetError) console.error(`[Bot Handler /start] Failed to reset missing last_start_message_id:`, resetError);
                    } else { console.error(`[Bot Handler /start] Failed to delete message ${userData.lastMessageId}:`, deleteError); }
                });
            }
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
            let messageText, buttonText, buttonUrl;
            if (userData.claimed) { messageText = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö –º–Ω–µ, –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç."; buttonText = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"; buttonUrl = TMA_URL; }
            else { messageText = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!"; buttonText = "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"; buttonUrl = `${TMA_URL}?action=claim_reward`; }
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log(`[Bot Handler /start] Sending new message (Claimed: ${userData.claimed})`);
            const sentMessage = await ctx.reply(messageText, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [[{ text: buttonText, web_app: { url: buttonUrl } }]] } });
            console.log(`[Bot Handler /start] New message sent. ID: ${sentMessage.message_id}`);
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const { error: updateError } = await supabaseAdmin.from('users').update({ last_start_message_id: sentMessage.message_id }).eq('id', userData.id);
            if (updateError) { console.error(`[Bot Handler /start] Failed to update last_start_message_id:`, updateError); }
            else { console.log(`[Bot Handler /start] Updated last_start_message_id to ${sentMessage.message_id}.`); }
        } catch (e) {
             console.error("[Bot Handler /start] CRITICAL Error:", e);
             // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
             try { await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.").catch(logReplyError); } catch {}
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–º)
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler text] Received text message.");
        const dreamText = ctx.message.text; const userId = ctx.from?.id; const chatId = ctx.chat.id; const messageId = ctx.message.message_id;
        if (!userId || !chatId) { console.warn("[Bot Handler text] No user/chat ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler text] Ignoring command.`); return; }

        console.log(`[Bot Handler text] Processing dream for ${userId}`);
        let statusMessage;
        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log(`[Bot Handler text] Deleting user message ${messageId}`);
            await ctx.api.deleteMessage(chatId, messageId).catch(delErr => { if (!(delErr instanceof GrammyError && delErr.error_code === 400 && delErr.description.includes("message to delete not found"))) { console.warn(`[Bot Handler text] Failed to delete user message ${messageId}:`, delErr); }});
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            statusMessage = await ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
            if (!statusMessage) throw new Error("Failed to send status message.");
            // –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ (–æ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ)
            await analyzeDream(ctx, supabaseAdmin, dreamText); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π supabaseAdmin
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
             console.log(`[Bot Handler text] Deleting status message ${statusMessage.message_id}`);
            await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(delErr => { console.warn(`[Bot Handler text] Failed to delete status message ${statusMessage.message_id}:`, delErr); });
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            console.log(`[Bot Handler text] Analysis complete. Sending confirmation.`);
            await ctx.reply("–í–∞—à –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚ú®\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", { reply_markup: { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app: { url: TMA_URL } }]] } }).catch(logReplyError);
        } catch (error) {
            console.error(`[Bot Handler text] Error processing dream for ${userId}:`, error);
            if (statusMessage) { await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(e => {}); }
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
        }
    });

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (pre_checkout_query, successful_payment)
    bot.on('pre_checkout_query', async (ctx) => { /* ... –≤–∞—à –∫–æ–¥ ... */ });
    bot.on('message:successful_payment', async (ctx) => { /* ... –≤–∞—à –∫–æ–¥ —Å RPC ... */ });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ grammy
    bot.catch((err) => {
        const ctx = err.ctx; const e = err.error;
        console.error(`[Bot Global Error Handler] Error for update ${ctx?.update?.update_id}:`);
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if (e instanceof GrammyError) { console.error("GrammyError:", e.description, e.payload ? JSON.stringify(e.payload) : ''); }
        else if (e instanceof HttpError) { console.error("HttpError:", e); }
        else if (e instanceof Error) { console.error("Error:", e.stack || e.message); } // –î–æ–±–∞–≤–ª—è–µ–º stack trace
        else { console.error("Unknown error:", e); }
    });

    console.log("[Bot Global Init] Handlers configured successfully.");

} catch (error) {
    // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase, GenAI, Bot
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
    bot = null; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–¥–µ—Å—å –∞–∫—Ç—É–∞–ª–µ–Ω
async function getOrCreateUser(supabase, userId) { /* ... –≤–∞—à –∫–æ–¥ —Å return { id, claimed, lastMessageId } ... */ }
async function getGeminiAnalysis(dreamText) { /* ... –≤–∞—à –∫–æ–¥ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π geminiModel –≤–Ω—É—Ç—Ä–∏ ... */ }
async function analyzeDream(ctx, supabase, dreamText) { /* ... –≤–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ ... */ }
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }

// --- –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Netlify (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º) ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (initializationError || !bot) {
        console.error("[Netlify Handler] Bot is not initialized due to previous errors.", initializationError);
        return { statusCode: 500, body: "Internal Server Error: Bot initialization failed." };
    }

    if (!event.body) {
        console.warn("[Netlify Handler] Empty event body.");
        return { statusCode: 200, body: "OK (empty body)" }; // –û–ö –¥–ª—è Telegram
    }

    let update;
    try {
        update = JSON.parse(event.body);
        console.log(`[Netlify Handler] Parsed update ID: ${update.update_id}`);
    } catch (e) {
        console.error("[Netlify Handler] Failed to parse JSON body:", e);
        console.error("[Netlify Handler] Raw body:", event.body);
        return { statusCode: 400, body: "Bad Request: Invalid JSON body" };
    }

    try {
        // <<<--- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–Ø–ï–ú bot.init() ---
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥ –ö–ê–ñ–î–´–ú handleUpdate, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å botInfo –≤—Ä—É—á–Ω—É—é
        console.log(`[Netlify Handler] Calling bot.init() for update ${update.update_id}...`);
        await bot.init(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (ID, username –∏ —Ç.–¥.)
        console.log(`[Netlify Handler] bot.init() successful. Calling bot.handleUpdate...`);
        // <<<--- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        await bot.handleUpdate(update);
        console.log(`[Netlify Handler] Update ${update.update_id} processed by grammy.`);
        return { statusCode: 200, body: "" }; // –û–ö –¥–ª—è Telegram

    } catch (error) {
        // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ bot.init() –∏–ª–∏ bot.handleUpdate(), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–π–º–∞–ª bot.catch
        console.error(`[Netlify Handler] UNEXPECTED error during bot processing for update ${update.update_id}:`, error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return { statusCode: 200, body: "OK (internal processing error)" };
    }
};

console.log("[Bot Global Init] Netlify handler configured manually."); // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
