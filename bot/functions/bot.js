const { Telegraf } = require('telegraf');
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const { getUser, createUser, createAnalysis } = require('../src/database');

console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
console.log('SUPABASE_URL:', process.env.SUPABASE_URL);
console.log('SUPABASE_KEY:', process.env.SUPABASE_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
console.log('BOT_TOKEN:', process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

const bot = new Telegraf(process.env.BOT_TOKEN);

console.log('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');

bot.start((ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', ctx.from);
  ctx.reply('üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dream Analyzer!*', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            web_app: { url: 'https://tourmaline-eclair-9d40ea.netlify.app' },
          },
        ],
      ],
    },
  });
});

bot.on('web_app_data', async (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App:', ctx.webAppData);
  const data = ctx.webAppData.data;
  const tgId = ctx.from.id;

  console.log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${data}, tgId: ${tgId}`);

  if (data === 'basic' || data === 'premium') {
    let user = await getUser(tgId);
    if (!user) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
      user = await createUser(tgId);
      if (!user) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ.');
      }
    }

    const prices = {
      basic: { tokens: 15, stars: 1 },
      premium: { tokens: 30, stars: 1 },
    };

    const selectedTariff = prices[data];
    if (!selectedTariff) {
      console.log('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∞—Ä–∏—Ñ:', data);
      return ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞...');
      await ctx.replyWithInvoice(
        `–¢–∞—Ä–∏—Ñ ${data.charAt(0).toUpperCase() + data.slice(1)}`,
        `–ü–æ–ª—É—á–∏—Ç–µ ${selectedTariff.tokens} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ ${selectedTariff.stars} Stars`,
        JSON.stringify({ tariff: data, tgId }),
        process.env.PAYMENT_PROVIDER_TOKEN,
        'XTR',
        [
          { label: `–¢–∞—Ä–∏—Ñ ${data}`, amount: selectedTariff.stars },
        ]
      );
      console.log('–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞:', err.message);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else if (data.startsWith('fetch:')) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Mini App
    const query = data.replace('fetch:', '');
    let responseData;

    try {
      if (query === `/users/${tgId}`) {
        const user = await getUser(tgId);
        if (!user) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        responseData = user;
      } else if (query === `/users/${tgId}/analyses`) {
        const user = await getUser(tgId);
        if (!user) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        let queryBuilder = supabase
          .from('analyses')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (user.subscription_type === 'trial') {
          const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
          queryBuilder = queryBuilder.gt('created_at', twentyFourHoursAgo);
        } else if (user.subscription_type === 'basic') {
          queryBuilder = queryBuilder.limit(3);
        } else if (user.subscription_type === 'premium') {
          queryBuilder = queryBuilder.limit(5);
        }

        const { data: analyses, error } = await queryBuilder;
        if (error) {
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤: ' + error.message);
        }
        responseData = analyses;
      } else {
        throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–ø—Ä–æ—Å');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Mini App —á–µ—Ä–µ–∑ answerWebAppQuery
      await ctx.answerWebAppQuery({
        web_app_query_id: ctx.webAppData.query_id,
        result: {
          type: 'article',
          id: ctx.webAppData.query_id,
          title: '–î–∞–Ω–Ω—ã–µ',
          input_message_content: {
            message_text: JSON.stringify(responseData),
          },
        },
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Mini App:', err.message);
      await ctx.answerWebAppQuery({
        web_app_query_id: ctx.webAppData.query_id,
        result: {
          type: 'article',
          id: ctx.webAppData.query_id,
          title: '–û—à–∏–±–∫–∞',
          input_message_content: {
            message_text: JSON.stringify({ error: err.message }),
          },
        },
      });
    }
  }
});

bot.on('pre_checkout_query', (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω pre_checkout_query:', ctx.preCheckoutQuery);
  ctx.answerPreCheckoutQuery(true);
});

bot.on('successful_payment', async (ctx) => {
  console.log('–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞:', ctx.message.successful_payment);
  const { tariff, tgId } = JSON.parse(ctx.message.successful_payment.invoice_payload);
  const prices = {
    basic: { tokens: 15 },
    premium: { tokens: 30 },
  };

  const selectedTariff = prices[tariff];
  if (!selectedTariff) {
    console.log('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:', tariff);
    return ctx.reply('–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  const user = await getUser(tgId);
  if (!user) {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ');
    return ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  try {
    const { error } = await supabase
      .from('users')
      .update({ subscription_type: tariff, tokens: user.tokens + selectedTariff.tokens })
      .eq('tg_id', tgId);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error.message);
      return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    ctx.reply(`–¢–∞—Ä–∏—Ñ ${tariff} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å ${user.tokens + selectedTariff.tokens} —Ç–æ–∫–µ–Ω–æ–≤.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', err.message);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.on('text', async (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text, '–æ—Ç:', ctx.from);
  const tgId = ctx.from.id;
  const dreamText = ctx.message.text;

  if (dreamText.startsWith('/')) {
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  }

  let user = await getUser(tgId);
  if (!user) {
    user = await createUser(tgId);
    if (!user) {
      return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (!user.tokens || user.tokens <= 0) {
    return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
  }

  try {
    await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω...');

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API...');
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [
          {
            parts: [
              {
                text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω: "${dreamText}". –û–±—ä—è—Å–Ω–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 400,
          temperature: 0.7,
        },
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 5000,
      }
    );

    console.log('–û—Ç–≤–µ—Ç –æ—Ç Gemini API:', response.data);
    if (!response.data.candidates || !response.data.candidates[0].content.parts[0].text) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API');
    }

    let analysis = response.data.candidates[0].content.parts[0].text.trim();
    if (response.data.candidates[0].finishReason === 'MAX_TOKENS') {
      analysis += '\n\n(–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–æ–Ω –∫–æ—Ä–æ—á–µ.)';
    }

    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ Supabase...');
    const analysisRecord = await createAnalysis(user.id, dreamText, analysis);
    if (!analysisRecord) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ Supabase');
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const { error } = await supabase
      .from('users')
      .update({ tokens: user.tokens - 1 })
      .eq('id', user.id);
    if (error) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ' + error.message);
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
    await ctx.reply(`‚ú® *–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:*\n\n${analysis}`, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞:', err.message);
    if (err.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Gemini API:', err.response.data);
    }
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

module.exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body);
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', body);
    await bot.handleUpdate(body);
    return { statusCode: 200, body: 'OK' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err.message);
    return { statusCode: 500, body: 'Error' };
  }
};
