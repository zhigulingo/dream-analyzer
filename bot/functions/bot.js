// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ9: –°–Ω–æ–≤–∞ webhookCallback, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π /start)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
let bot;
let supabaseAdmin;
let genAI; // –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å
let geminiModel = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ null
let initializationError = null;
let botInitializedAndHandlersSet = false; // –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

try {
    console.log("[Bot Global Init] Starting initialization...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        throw new Error("FATAL: Missing one or more environment variables!");
    }

    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º genAI
    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Clients and bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received."); // –õ–û–ì
        const userId = ctx.from?.id;
        const chatId = ctx.chat.id;
        if (!userId || !chatId) { console.warn("[Bot Handler /start] No user ID or chat ID."); return; }
        console.log(`[Bot Handler /start] User ${userId} in chat ${chatId}`);
        try {
            const userData = await getOrCreateUser(supabaseAdmin, userId);
            if (!userData || !userData.id) throw new Error("Failed to retrieve user data.");
            console.log(`[Bot Handler /start] User data: ID=${userData.id}, Claimed=${userData.claimed}, LastMsgId=${userData.lastMessageId}`);
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (userData.lastMessageId) {
                console.log(`[Bot Handler /start] Attempting delete msg ${userData.lastMessageId}`);
                await ctx.api.deleteMessage(chatId, userData.lastMessageId).catch(async (deleteError) => {
                    if (deleteError instanceof GrammyError && (deleteError.error_code === 400 && deleteError.description.includes("message to delete not found"))) {
                        console.log(`[Bot Handler /start] Msg ${userData.lastMessageId} not found.`);
                        await supabaseAdmin.from('users').update({ last_start_message_id: null }).eq('id', userData.id).catch(e => console.error("Failed reset last msg id:", e));
                    } else { console.error(`[Bot Handler /start] Failed delete msg ${userData.lastMessageId}:`, deleteError); }
                });
            }
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
            let messageText, buttonText, buttonUrl;
            if (userData.claimed) { messageText = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–Ω—ã –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –õ–ö."; buttonText = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"; buttonUrl = TMA_URL; }
            else { messageText = "–ü—Ä–∏–≤–µ—Ç! üëã –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!"; buttonText = "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"; buttonUrl = `${TMA_URL}?action=claim_reward`; }
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log(`[Bot Handler /start] Sending new message (Claimed: ${userData.claimed})`);
            const sentMessage = await ctx.reply(messageText, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [[{ text: buttonText, web_app: { url: buttonUrl } }]] } });
            console.log(`[Bot Handler /start] New message sent. ID: ${sentMessage.message_id}`);
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const { error: updateError } = await supabaseAdmin.from('users').update({ last_start_message_id: sentMessage.message_id }).eq('id', userData.id);
            if (updateError) console.error(`[Bot Handler /start] Failed update last_start_message_id:`, updateError);
            else console.log(`[Bot Handler /start] Updated last_start_message_id to ${sentMessage.message_id}.`);
        } catch (e) {
             console.error("[Bot Handler /start] CRITICAL Error:", e);
             try { await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.").catch(logReplyError); } catch {}
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler text] Received text message."); // –õ–û–ì
        const dreamText = ctx.message.text; const userId = ctx.from?.id; const chatId = ctx.chat.id; const messageId = ctx.message.message_id;
        if (!userId || !chatId) { console.warn("[Bot Handler text] No user/chat ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler text] Ignoring command.`); return; }
        console.log(`[Bot Handler text] Processing dream for ${userId}`);
        let statusMessage;
        try {
            console.log(`[Bot Handler text] Deleting user message ${messageId}`);
            await ctx.api.deleteMessage(chatId, messageId).catch(delErr => { if (!(delErr instanceof GrammyError && delErr.error_code === 400 && delErr.description.includes("message to delete not found"))) { console.warn(`[Bot Handler text] Failed delete user msg ${messageId}:`, delErr); }});
            statusMessage = await ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
            if (!statusMessage) throw new Error("Failed to send status message.");
            await analyzeDream(ctx, supabaseAdmin, dreamText); // –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            console.log(`[Bot Handler text] Deleting status message ${statusMessage.message_id}`);
            await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(delErr => { console.warn(`[Bot Handler text] Failed delete status msg ${statusMessage.message_id}:`, delErr); });
            console.log(`[Bot Handler text] Analysis complete. Sending confirmation.`);
            await ctx.reply("–í–∞—à –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚ú®\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", { reply_markup: { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app: { url: TMA_URL } }]] } }).catch(logReplyError);
        } catch (error) {
            console.error(`[Bot Handler text] Error processing dream for ${userId}:`, error);
            if (statusMessage) { await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(e => {}); }
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
        }
    });

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.on('pre_checkout_query', async (ctx) => { /* ... –≤–∞—à –∫–æ–¥ ... */ });
    bot.on('message:successful_payment', async (ctx) => { /* ... –≤–∞—à –∫–æ–¥ —Å RPC ... */ });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ grammy
    bot.catch((err) => {
        const ctx = err.ctx; const e = err.error;
        console.error(`[Bot Global Error Handler] Error for update ${ctx?.update?.update_id}:`);
        if (e instanceof GrammyError) { console.error("GrammyError:", e.description, e.payload ? JSON.stringify(e.payload) : ''); }
        else if (e instanceof HttpError) { console.error("HttpError:", e); }
        else if (e instanceof Error) { console.error("Error:", e.stack || e.message); }
        else { console.error("Unknown error:", e); }
    });

    console.log("[Bot Global Init] Handlers setup complete.");
    botInitializedAndHandlersSet = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —É—Å–ø–µ—Ö–∞

} catch (error) {
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error;
    bot = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    botInitializedAndHandlersSet = false;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–¥–µ—Å—å
async function getOrCreateUser(supabase, userId) { /* ... –≤–∞—à –∫–æ–¥ —Å return { id, claimed, lastMessageId } ... */ }
async function getGeminiAnalysis(dreamText) { /* ... –≤–∞—à –∫–æ–¥ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π geminiModel –≤–Ω—É—Ç—Ä–∏ ... */ }
async function analyzeDream(ctx, supabase, dreamText) { /* ... –≤–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ ... */ }
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }

// --- –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhookCallback –ó–ê–†–ê–ù–ï–ï ---
// –î–µ–ª–∞–µ–º —ç—Ç–æ –≤–Ω–µ try...catch, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ —Å–∞–º–æ–≥–æ webhookCallback, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
let netlifyWebhookHandler = null;
if (botInitializedAndHandlersSet && bot) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'aws-lambda-async' –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å async/await Netlify
        netlifyWebhookHandler = webhookCallback(bot, 'aws-lambda-async');
        console.log("[Bot Global Init] webhookCallback created successfully.");
    } catch (callbackError) {
        console.error("[Bot Global Init] FAILED TO CREATE webhookCallback:", callbackError);
        initializationError = callbackError; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —ç—Ç—É –æ—à–∏–±–∫—É
    }
} else {
     console.error("[Bot Global Init] Skipping webhookCallback creation due to initialization errors.");
     // initializationError —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
}


// --- –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Netlify —Å webhookCallback ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–õ–ò —Å–æ–∑–¥–∞–Ω–∏—è webhookCallback
    if (initializationError || !netlifyWebhookHandler) {
        console.error("[Netlify Handler] Initialization or webhookCallback creation failed.", initializationError);
        return { statusCode: 500, body: "Internal Server Error: Bot failed to initialize or configure." };
    }

    // –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console.log("[Netlify Handler] Calling pre-created webhookCallback handler...");
    // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ Netlify –≤ –≥–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ grammY
    return netlifyWebhookHandler(event);
};

console.log("[Bot Global Init] Netlify handler exported.");
