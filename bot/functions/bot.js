// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
// ... (getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError) ...
// –ö–æ–¥ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ.
// –Ø –∏—Ö —Å–æ–∫—Ä–∞—Ç–∏–ª –∑–¥–µ—Å—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é.

async function getOrCreateUser(supabase, userId) {
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabase
            .from('users').select('id').eq('tg_id', userId).single();
        if (selectError && selectError.code !== 'PGRST116') throw selectError;
        if (existingUser) return existingUser.id;
        else {
            const { data: newUser, error: insertError } = await supabase
                .from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 1 }).select('id').single();
            if (insertError) throw insertError;
            if (!newUser) throw new Error("User creation returned no data.");
            console.log(`Created new user: tg_id=${userId}, id=${newUser.id}`);
            return newUser.id;
        }
    } catch (error) {
        console.error(`Error in getOrCreateUser for ${userId}:`, error.message); return null;
    }
}

async function getGeminiAnalysis(geminiModel, dreamText) {
    if (!geminiModel) {
         console.error("Gemini model is null or undefined in getGeminiAnalysis.");
         return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.";
    }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;

    try {
        console.log("Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response;

        if (response.promptFeedback?.blockReason) {
            console.warn(`Gemini blocked: ${response.promptFeedback.blockReason}`);
            return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.`;
        }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) {
            console.error("Gemini returned empty response.");
            if (!response.candidates || response.candidates.length === 0) { console.error("Gemini response candidates array is empty or missing."); }
            else { console.log("Gemini response candidates:", JSON.stringify(response.candidates)); }
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞).";
        }
        console.log("Gemini analysis received successfully.");
        return analysisText;
    } catch (error) {
        console.error("Error explicitly caught in getGeminiAnalysis:", error);
         if (error.message && error.message.includes("API key not valid")) { return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞."; }
         // <<<--- –£—Ç–æ—á–Ω–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 404 ---
         else if (error.status === 404 || (error.message && (error.message.includes("404") || error.message.includes("is not found")))) {
             console.error(`Model not found error details: Status=${error.status}, Message=${error.message}`);
             return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.";
         }
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
}

async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        userDbId = await getOrCreateUser(supabase, userId);
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(logReplyError); return; }
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId });
        if (rpcError) throw new Error(`RPC Error: ${rpcError.message}`);
        if (!tokenDecremented) {
            if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(logReplyError);
            await ctx.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError); return;
        }
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); }
        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message:", e)); processingMessage = null; }
        const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));
        if (isErrorResult) {
            await ctx.reply(analysisResult || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError);
            console.warn(`Analysis for ${userId} failed or blocked, token consumed. Reason: ${analysisResult}`); return;
        }
        const { error: insertError } = await supabase
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });
        if (insertError) {
            console.error(`Error saving analysis for user_id ${userDbId}:`, insertError);
            await ctx.reply("–°–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é. –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + analysisResult).catch(logReplyError);
             await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError); return;
        }
        console.log(`Analysis for ${userId} successful.`);
        await ctx.reply(`–í–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞:\n\n${analysisResult}\n\n–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`, {
            reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
        }).catch(logReplyError);
    } catch (error) {
        console.error(`Critical error in analyzeDream for ${userId}:`, error);
         if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message on error:", e)); }
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–Ω–∞.").catch(logReplyError);
    }
}

function logReplyError(error) { console.error("Failed to send message to Telegram:", error); }


// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("Handler invoked.");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY) { /*...*/ console.error("FATAL: Missing required environment variables!"); return { statusCode: 500, body: "Internal Server Error: Configuration missing." }; }
    if (!event.body) { /*...*/ console.warn("Handler called without event body."); return { statusCode: 400, body: "Bad Request: Missing event body" }; }
    let update; try { update = JSON.parse(event.body); } catch (e) { /*...*/ console.error("Failed to parse event body:", e); return { statusCode: 400, body: "Bad Request: Invalid JSON" }; }

    let supabase; let geminiModel; let bot;
    try {
        console.log("Initializing clients inside handler...");
        supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'gemini-2.0-flash' ---
        geminiModel = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        console.log("Using Gemini model: gemini-2.0-flash"); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        bot = new Bot(BOT_TOKEN);
        console.log("Bot instance created. Calling bot.init()...");
        await bot.init();
        console.log("bot.init() successful. Bot info:", bot.botInfo);
    } catch (initError) {
        console.error("FATAL: Failed to initialize clients or bot.init() failed:", initError);
         if (initError.message && initError.message.includes("Fetching model")) { console.error("Specific error: Could not fetch the specified Gemini model. Check model name and API key permissions."); return { statusCode: 500, body: "Internal Server Error: Failed to configure AI model." }; }
         // <<<--- –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ ---
         else if (initError.status === 404 || (initError.message && (initError.message.includes("404") || initError.message.includes("is not found")))) {
             console.error(`Model not found during initialization: Status=${initError.status}, Message=${initError.message}`);
             return { statusCode: 500, body: "Internal Server Error: AI Model not found or inaccessible." };
         }
        return { statusCode: 500, body: "Internal Server Error: Bot initialization failed." };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    console.log("Setting up bot handlers...");
    bot.command("start", async (ctx) => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */
        const userId = ctx.from?.id; if (!userId) return; console.log(`User ${userId} started bot.`);
        try {
            await getOrCreateUser(supabase, userId);
            await ctx.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –°–Ω–æ–≤! ‚ú®\n\n" +
                "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ —Ä–∞—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å (—É –≤–∞—Å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑).\n\n" +
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤ üëá", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError);
        } catch (e) { console.error("Error in /start handler:", e); await ctx.reply("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError); }
    });
    bot.on("message:text", async (ctx) => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */
         const dreamText = ctx.message.text; const userId = ctx.from?.id; if (!userId) return;
         if (dreamText.startsWith('/')) { console.log(`Ignoring command: ${dreamText}`); return; }
         console.log(`Received text from ${userId}: "${dreamText.substring(0, 50)}..."`);
         await analyzeDream(ctx, supabase, geminiModel, dreamText); // –ü–µ—Ä–µ–¥–∞–µ–º geminiModel
    });
    // <<<--- –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SuccessfulPayment ---
    bot.on('message:successful_payment', async (ctx) => {
        const payment = ctx.message.successful_payment;
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞—Ç–∏–ª
        console.log(`Received SuccessfulPayment from ${userId}:`, payment);

        // –†–∞—Å–ø–∞—Ä—Å–∏–º payload, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤ TMA
        const payload = payment.invoice_payload; // –ù–∞–ø—Ä–∏–º–µ—Ä: "sub_premium_3mo_638922962"
        const parts = payload.split('_');
        if (parts.length < 4 || parts[0] !== 'sub') {
            console.error(`Invalid payload received: ${payload}`);
            // –ß—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ? –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞.
            return;
        }

        const plan = parts[1]; // 'premium' –∏–ª–∏ 'basic'
        const durationMonths = parseInt(parts[2].replace('mo', ''), 10);
        const payloadUserId = parseInt(parts[3], 10); // ID –∏–∑ payload (–¥–ª—è –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∏)

        if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) {
             console.error(`Payload parsing error or user mismatch: payload=${payload}, userId=${userId}`);
             // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
             // await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.").catch(logReplyError);
             return;
        }

        console.log(`Processing payment for user ${userId}: Plan=${plan}, Duration=${durationMonths} months.`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        try {
            if (!supabase) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç supabase –¥–æ—Å—Ç—É–ø–µ–Ω
                 console.error("Supabase client not available in successful_payment handler!");
                 throw new Error("Database client unavailable");
            }

             // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
            const { data: user, error: findError } = await supabase
                .from('users').select('id, subscription_end').eq('tg_id', userId).single();

            if (findError || !user) {
                console.error(`User ${userId} not found in DB for successful payment!`);
                throw new Error(`User ${userId} not found`);
            }

            // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            const now = new Date();
            let currentSubEnd = user.subscription_end ? new Date(user.subscription_end) : now;
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç —Å "—Å–µ–π—á–∞—Å"
            if (currentSubEnd < now) {
                 currentSubEnd = now;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã
            const newSubEndDate = new Date(currentSubEnd.setMonth(currentSubEnd.getMonth() + durationMonths));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             const { error: updateError } = await supabase
                 .from('users')
                 .update({
                     subscription_type: plan,
                     subscription_end: newSubEndDate.toISOString(),
                     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ basic –∏—Ö –¥–∞–µ—Ç
                     // tokens: (plan === 'basic' ? 30 : supabase.literal('tokens')) // –ü—Ä–∏–º–µ—Ä: basic –¥–∞–µ—Ç 30 —Ç–æ–∫–µ–Ω–æ–≤, premium –Ω–µ –º–µ–Ω—è–µ—Ç
                 })
                 .eq('id', user.id); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID

            if (updateError) {
                console.error(`Failed to update user ${userId} subscription in DB:`, updateError);
                throw new Error("Database update failed");
            }

            console.log(`User ${userId} subscription updated: Plan=${plan}, Ends=${newSubEndDate.toISOString()}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${newSubEndDate.toLocaleDateString()}. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤!`).catch(logReplyError);

        } catch (error) {
             console.error(`Failed to process successful payment for user ${userId}:`, error);
             // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
             await ctx.reply("–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —É–∫–∞–∑–∞–≤ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞.").catch(logReplyError);
        }
    });

    bot.catch((err) => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */
        const ctx = err.ctx; const e = err.error; console.error(`Error caught by bot.catch for update ${ctx.update.update_id}:`);
        if (e instanceof GrammyError) console.error("GrammyError:", e.description, e.payload);
        else if (e instanceof HttpError) console.error("HttpError:", e);
        else if (e instanceof Error) console.error("Error:", e.stack || e.message);
        else console.error("Unknown error object:", e);
    });
    console.log("Bot handlers configured.");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
        console.log("Passing update to bot.handleUpdate...");
        await bot.handleUpdate(update);
        console.log("bot.handleUpdate finished.");
        return { statusCode: 200, body: "" };
    } catch (error) {
        console.error("Error during bot.handleUpdate call:", error);
        return { statusCode: 500, body: "Internal Server Error during update processing." };
    }
};

// <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ ---
console.log("Netlify function bot.js (handler-init + bot.init() + gemini-2.0-flash) loaded.");
