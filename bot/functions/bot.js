// bot/functions/bot.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUser(supabase, userId) {
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabase
            .from('users').select('id').eq('tg_id', userId).single();
        if (selectError && selectError.code !== 'PGRST116') throw selectError;
        if (existingUser) return existingUser.id;
        else {
            const { data: newUser, error: insertError } = await supabase
                .from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 1 }).select('id').single();
            if (insertError) throw insertError;
            if (!newUser) throw new Error("User creation returned no data.");
            console.log(`[Bot] Created new user: tg_id=${userId}, id=${newUser.id}`);
            return newUser.id;
        }
    } catch (error) { console.error(`[Bot] Error in getOrCreateUser for ${userId}:`, error.message); return null; }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞
async function getGeminiAnalysis(geminiModel, dreamText) {
    if (!geminiModel) { console.error("[Bot] Gemini model is null or undefined in getGeminiAnalysis."); return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."; }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;
    try {
        console.log("[Bot] Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response;
        if (response.promptFeedback?.blockReason) { console.warn(`[Bot] Gemini blocked: ${response.promptFeedback.blockReason}`); return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}).`; }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) { console.error("[Bot] Gemini returned empty response."); return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)."; }
        console.log("[Bot] Gemini analysis received successfully.");
        return analysisText;
    } catch (error) {
        console.error("[Bot] Error explicitly caught in getGeminiAnalysis:", error);
         if (error.message?.includes("API key not valid")) { return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API."; }
         else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) { return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."; }
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞.";
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        userDbId = await getOrCreateUser(supabase, userId);
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.").catch(logReplyError); return; }
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º tg_id

        if (rpcError) { console.error(`[Bot:analyzeDream] RPC error for tg_id ${userId}:`, rpcError); throw new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.");}
        if (!tokenDecremented) { console.log(`[Bot:analyzeDream] Not enough tokens for ${userId}.`); if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); await ctx.reply("–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.", { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError); return; }

        console.log(`[Bot:analyzeDream] Token decremented for ${userId}.`);
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }

        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); processingMessage = null; }

        const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));
        if (isErrorResult) { await ctx.reply(analysisResult || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError); console.warn(`[Bot] Analysis failed for ${userId}, token consumed.`); return; }

        const { error: insertError } = await supabase
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });
        if (insertError) { console.error(`[Bot] Error saving analysis for ${userDbId}:`, insertError); await ctx.reply("–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n" + analysisResult).catch(logReplyError); return; }

        console.log(`[Bot] Analysis successful for ${userId}.`);
        await ctx.reply(`–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n\n${analysisResult}\n\n–¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω. –ò—Å—Ç–æ—Ä–∏—è –≤ –õ–ö.`, { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError);

    } catch (error) {
        console.error(`[Bot] Critical error in analyzeDream for ${userId}:`, error.message);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); }
        await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("[Bot] Handler invoked.");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY) { console.error("[Bot] FATAL: Missing env vars!"); return { statusCode: 500, body: "Config missing." }; }
    if (!event.body) { console.warn("[Bot] Empty event body."); return { statusCode: 400, body: "Bad Request" }; }
    let update; try { update = JSON.parse(event.body); } catch (e) { console.error("[Bot] Invalid JSON body:", e); return { statusCode: 400, body: "Invalid JSON" }; }

    let supabaseAdmin; let geminiModel; let bot;
    try {
        console.log("[Bot] Initializing clients...");
        supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModel = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        bot = new Bot(BOT_TOKEN);
        await bot.init();
        console.log("[Bot] Clients initialized.");
    } catch (initError) { console.error("[Bot] FATAL: Client init failed:", initError); return { statusCode: 500, body: "Init failed." }; }

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot] Setting up handlers...");

    bot.command("start", async (ctx) => {
        console.log("[Bot:Handler /start] Received /start command.");
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot:Handler /start] No user ID."); return; }
        console.log(`[Bot:Handler /start] User ${userId}`);

        // --- –ò–ó–ú–ï–ù–ï–ù–û: –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞—á–∏—Å–ª—è–µ–º ---
        try {
            await getOrCreateUser(supabaseAdmin, userId); // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            console.log(`[Bot:Handler /start] Ensured user ${userId} exists.`);

            // --- –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ü–û–õ–£–ß–ï–ù–ò–Ø —Ç–æ–∫–µ–Ω–∞ –≤ TMA ---
            const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Ç–∞–π–Ω—ã–µ —Å–º—ã—Å–ª—ã —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ü–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω!";
            const buttonUrl = `${TMA_URL}?action=claim_reward`; // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è TMA

            await ctx.reply(welcomeMessage, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        web_app: { url: buttonUrl } // URL –≤–µ–¥–µ—Ç –≤ TMA —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    }]]
                }
            }).catch(logReplyError);

             console.log(`[Bot:Handler /start] Welcome & 'Get Token' button sent to ${userId}.`);

        } catch (e) {
            console.error("[Bot:Handler /start] Error ensuring user or sending message:", e);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.").catch(logReplyError);
        }
    }); // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ bot.command

    bot.on("message:text", async (ctx) => {
         console.log("[Bot:Handler text] Received text message.");
         const dreamText = ctx.message.text; const userId = ctx.from?.id; if (!userId) return;
         if (dreamText.startsWith('/')) { console.log(`[Bot:Handler text] Ignoring command: ${dreamText}`); return; }
         console.log(`[Bot:Handler text] Processing dream for ${userId}`);
         await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText);
    }); // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ bot.on("message:text")

    bot.on('pre_checkout_query', async (ctx) => {
        console.log("[Bot:Handler pre_checkout_query] Received:", JSON.stringify(ctx.preCheckoutQuery));
        try {
            await ctx.answerPreCheckoutQuery(true);
            console.log("[Bot:Handler pre_checkout_query] Answered TRUE.");
        } catch (error) { console.error("[Bot:Handler pre_checkout_query] Failed to answer:", error); try { await ctx.answerPreCheckoutQuery(false, "Error"); } catch (e) {} }
    }); // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ bot.on('pre_checkout_query')

    bot.on('message:successful_payment', async (ctx) => {
        console.log("[Bot:Handler successful_payment] Received:", JSON.stringify(ctx.message.successful_payment));
        const payment = ctx.message.successful_payment; const userId = ctx.from.id;
        const payload = payment.invoice_payload; const parts = payload.split('_');
        if (parts.length < 4 || parts[0] !== 'sub') { console.error(`[Bot] Invalid payload: ${payload}`); return; }
        const plan = parts[1]; const durationMonths = parseInt(parts[2].replace('mo', ''), 10); const payloadUserId = parseInt(parts[3], 10);
        if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) { console.error(`[Bot] Payload error/mismatch: ${payload}, sender=${userId}`); return; }
        console.log(`[Bot] Processing payment for ${userId}: Plan=${plan}, Duration=${durationMonths}m.`);
        try {
            if (!supabaseAdmin) { throw new Error("Supabase unavailable"); }
            const { data: user, error: findError } = await supabaseAdmin.from('users').select('id, tokens, subscription_end').eq('tg_id', userId).single();
            if (findError || !user) { console.error(`[Bot] User ${userId} not found for payment!`); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.").catch(logReplyError); return; }
            const now = new Date(); let currentSubEnd = user.subscription_end ? new Date(user.subscription_end) : now; if (currentSubEnd < now) currentSubEnd = now;
            const newSubEndDate = new Date(currentSubEnd.setMonth(currentSubEnd.getMonth() + durationMonths));
            let tokensToAdd = 0; if (plan === 'basic') tokensToAdd = 15; else if (plan === 'premium') tokensToAdd = 30;
            const currentTokens = user.tokens || 0; const newTokens = currentTokens + tokensToAdd;
            console.log(`[Bot] Updating tokens for ${userId}: Current=${currentTokens}, Add=${tokensToAdd}, New=${newTokens}`);
            const { error: updateError } = await supabaseAdmin.from('users').update({ subscription_type: plan, subscription_end: newSubEndDate.toISOString(), tokens: newTokens }).eq('id', user.id);
            if (updateError) { console.error(`[Bot] DB update failed for ${userId}:`, updateError); throw new Error("DB update failed"); }
            console.log(`[Bot] User ${userId} updated: Plan=${plan}, Ends=${newSubEndDate.toISOString()}, Tokens=${newTokens}`);
            await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${newSubEndDate.toLocaleDateString()}. ${tokensToAdd > 0 ? `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${tokensToAdd} —Ç–æ–∫–µ–Ω–æ–≤.` : ''}`).catch(logReplyError);
        } catch (error) { console.error(`[Bot] Failed process payment for ${userId}:`, error); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.").catch(logReplyError); }
    }); // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ bot.on('message:successful_payment')

    bot.catch((err) => {
        const ctx = err.ctx; const e = err.error; console.error(`[Bot] Error caught by bot.catch for update ${ctx.update.update_id}:`);
        if (e instanceof GrammyError) console.error("GrammyError:", e.description, e.payload);
        else if (e instanceof HttpError) console.error("HttpError:", e);
        else if (e instanceof Error) console.error("Error:", e.stack || e.message);
        else console.error("Unknown error object:", e);
    }); // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ bot.catch

    console.log("[Bot] Handlers configured.");

    // --- 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    try {
        console.log("[Bot] Passing update to bot.handleUpdate...");
        await bot.handleUpdate(update);
        console.log("[Bot] bot.handleUpdate finished.");
        return { statusCode: 200, body: "" };
    } catch (error) {
        console.error("[Bot] Error during bot.handleUpdate call:", error);
        return { statusCode: 500, body: "Internal Server Error during update processing." };
    }
}; // <--- –ó–∞–∫—Ä—ã—Ç–∏–µ exports.handler

console.log("[Bot] Netlify function bot.js (vX - check closing brackets) loaded."); // –û–±–Ω–æ–≤–∏–ª –ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
