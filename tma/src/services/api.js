// tma/src/services/api.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è)
import axios from 'axios';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –ó–ê–î–ê–ù–ê –≤ Netlify UI –¥–ª—è —Å–∞–π—Ç–∞ TMA
// –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ü–û–õ–ù–´–ô –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏—è–º (–≤–∫–ª—é—á–∞—è /.netlify/functions)
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

// –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ TMA
if (!API_BASE_URL) {
    console.error("CRITICAL: VITE_API_BASE_URL is not set in environment variables!");
    console.error("Please set VITE_API_BASE_URL in your Netlify environment variables.");
    console.error("Example: https://your-site.netlify.app/.netlify/functions");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }
} else {
    console.log('[api.js] Using API Base URL:', API_BASE_URL);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Axios —Å –±–∞–∑–æ–≤—ã–º URL
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –¥–æ–ª–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑) –Ω–µ –ø–∞–¥–∞–ª–∏
  timeout: 60000
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Init-Data
apiClient.interceptors.request.use(
  (config) => {
    const initData = window.Telegram?.WebApp?.initData;
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log("[api.js] Request interceptor - URL:", config.url);
    console.log("[api.js] Telegram WebApp available:", !!window.Telegram?.WebApp);
    console.log("[api.js] InitData available:", !!initData);
    
    if (initData) {
      config.headers['X-Telegram-Init-Data'] = initData;
      console.log("[api.js] ‚úÖ Added InitData header (length:", initData.length, ")");
      
      // –ü–∞—Ä—Å–∏–º initData –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      try {
        const params = new URLSearchParams(initData);
        const hasHash = !!params.get('hash');
        const hasUser = !!params.get('user');
        console.log("[api.js] InitData validation - Hash:", hasHash, "User:", hasUser);
        
        if (hasUser) {
          const userStr = params.get('user');
          const userData = JSON.parse(decodeURIComponent(userStr));
          console.log("[api.js] User ID from initData:", userData.id);
        }
      } catch (e) {
        console.error("[api.js] Error parsing initData for diagnostics:", e);
      }
    } else {
      console.warn("[api.js] ‚ùå InitData not available - API calls will likely fail");
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—á–µ–º—É initData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      console.log("[api.js] Diagnostic info:");
      console.log("  - window.Telegram exists:", !!window.Telegram);
      console.log("  - window.Telegram.WebApp exists:", !!window.Telegram?.WebApp);
      console.log("  - navigator.userAgent:", navigator.userAgent);
      console.log("  - window.TelegramWebviewProxy exists:", !!window.TelegramWebviewProxy);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –º—ã –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (import.meta.env.MODE === 'development') {
        console.log("[api.js] üß™ Development mode - consider adding test initData");
      }
    }
    
    return config;
  },
  (error) => {
    console.error("[api.js] Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response) => {
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return response;
  },
  (error) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ (—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
    if (error.response) {
      // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å –Ω–µ 2xx)
      console.error('[api.js] Axios response error (from server):', {
          message: error.message,
          url: error.config?.url,
          method: error.config?.method,
          status: error.response?.status,
          data: error.response?.data, // –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –æ—Ç –±—ç–∫–µ–Ω–¥–∞
      });
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —Ç–∞–π–º–∞—É—Ç)
      console.error('[api.js] Axios network error (no response):', {
          message: error.message,
          url: error.config?.url,
          method: error.config?.method,
          code: error.code, // e.g., 'ECONNABORTED' for timeout
      });
    } else {
      // –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      console.error('[api.js] Axios request setup error:', error.message);
    }
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—Ç–æ—Ä–µ –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    return Promise.reject(error);
  }
);

// –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ API –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ —Å—Ç–æ—Ä–æ–≤/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const apiMethods = {
  getUserProfile() {
    console.log("[api.js] Calling POST /user-profile");
    return apiClient.post('/user-profile');
  }, // <--- –ó–∞–ø—è—Ç–∞—è

  // –°–≤–µ–∂–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∫–µ—à–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  getUserProfileFresh() {
    console.log("[api.js] Calling POST /user-profile?noCache=1");
    return apiClient.post('/user-profile?noCache=1');
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
  claimChannelReward() {
    console.log("[api.js] Calling POST /claim-channel-token");
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω)
    return apiClient.post('/claim-channel-token'); // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω—É–∂–Ω–æ, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ initData
  }, // <<<--- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–ï–ù–ê –ó–ê–ü–Ø–¢–ê–Ø

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
  getAnalysesHistory() {
    console.log("[api.js] Calling GET /analyses-history");
    return apiClient.get('/analyses-history');
  }, // <--- –ó–∞–ø—è—Ç–∞—è

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  setOnboardingStage(stage) {
    console.log("[api.js] Calling POST /set-onboarding-stage");
    return apiClient.post('/set-onboarding-stage', { stage });
  },

  // <<<--- –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê ---
  getDeepAnalysis() {
    console.log("[api.js] Calling POST /deep-analysis");
    // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ–ª—å—à–µ, –∑–∞–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—Ä–æ—Å–∞
    return apiClient.post('/deep-analysis', {}, { timeout: 90000 });
  },

  // –ò—Å—Ç–æ—Ä–∏—è –≥–ª—É–±–æ–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑ –æ–±—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏)
  getDeepAnalysesHistory() {
    console.log("[api.js] Calling GET /analyses-history?type=deep");
    return apiClient.get('/analyses-history', { params: { type: 'deep' } });
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å
  createInvoiceLink(plan, duration, amount, payload) {
     console.log("[api.js] Calling POST /create-invoice");
     // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–ª–µ POST-–∑–∞–ø—Ä–æ—Å–∞
    return apiClient.post('/create-invoice', {
        plan,
        duration,
        amount,
        payload
    });
  }, // <--- –ó–∞–ø—è—Ç–∞—è —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞

  // –ù–æ–≤—ã–π: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É
  postAnalysisFeedback(analysisId, feedback) {
    console.log('[api.js] Calling POST /analysis-feedback');
    return apiClient.post('/analysis-feedback', { analysisId, feedback });
  },

  // Demographics
  setDemographics(age_range, gender) {
    console.log('[api.js] Calling POST /set-demographics');
    return apiClient.post('/set-demographics', { age_range, gender });
  },

  // –ù–æ–≤—ã–π: —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
  deleteAnalysis(analysisId) {
    console.log('[api.js] Calling DELETE /analysis');
    return apiClient.delete('/analysis', { data: { analysisId } });
  },

  // –¢—Ä–µ–∫–∏–Ω–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint performance-metrics (bot_event)
  trackOnboarding(eventName, extra = {}) {
    try {
      const tg = window.Telegram?.WebApp;
      const userId = tg?.initDataUnsafe?.user?.id || null;
      const payload = { type: 'bot_event', eventType: String(eventName), userId, ...extra };
      console.log('[api.js] Tracking onboarding event:', payload);
      return apiClient.post('/performance-metrics', payload).catch((e) => {
        console.warn('[api.js] trackOnboarding failed (non-blocking):', e?.message || e);
      });
    } catch (e) {
      console.warn('[api.js] trackOnboarding error (non-blocking):', e?.message || e);
      return Promise.resolve();
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Axios (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –Ω–∞–ø—Ä—è–º—É—é)
// –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ API
export { apiClient };
export default apiMethods;
