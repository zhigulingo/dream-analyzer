// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ6: webhookCallback + –ª–æ–≥–∏–∫–∞ /start + –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto'); // –î–ª—è –±—É–¥—É—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è (–í–ê–ñ–ù–û: –ü–†–û–í–ï–†–¨–¢–ï –ò–• –í NETLIFY!) ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL; // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Mini App

// --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
let bot;
let supabaseAdmin;
let geminiModel;
let initializationError = null;

try {
    console.log("[Bot Global Init] Initializing clients and bot...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        throw new Error("FATAL: Missing one or more environment variables!");
    }

    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    console.log("[Bot Global Init] Supabase client created.");

    // –û—Ç–ª–æ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Gemini –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ analyzeDream
    // const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    // geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
    // console.log("[Bot Global Init] Gemini client prepared.");

    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Basic bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (–° –ª–æ–≥–∏–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received.");
        const userId = ctx.from?.id;
        const chatId = ctx.chat.id; // ID —á–∞—Ç–∞ –Ω—É–∂–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!userId || !chatId) { console.warn("[Bot Handler /start] No user ID or chat ID."); return; }
        console.log(`[Bot Handler /start] User ${userId} in chat ${chatId}`);

        let userData;
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { id, claimed, lastMessageId })
            userData = await getOrCreateUser(supabaseAdmin, userId);
            if (!userData || !userData.id) throw new Error("Failed to retrieve user data after getOrCreateUser.");
            console.log(`[Bot Handler /start] User data: ID=${userData.id}, Claimed=${userData.claimed}, LastMsgId=${userData.lastMessageId}`);

            // 2. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start, –µ—Å–ª–∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            if (userData.lastMessageId) {
                console.log(`[Bot Handler /start] Attempting to delete previous message ${userData.lastMessageId} in chat ${chatId}`);
                await ctx.api.deleteMessage(chatId, userData.lastMessageId)
                    .then(() => console.log(`[Bot Handler /start] Deleted previous message.`))
                    .catch(async (deleteError) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º async –¥–ª—è await –≤–Ω—É—Ç—Ä–∏ catch
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        if (deleteError instanceof GrammyError && (deleteError.error_code === 400 && deleteError.description.includes("message to delete not found"))) {
                            console.log(`[Bot Handler /start] Previous message ${userData.lastMessageId} not found or already deleted.`);
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –≤ –±–∞–∑–µ, —Ç.–∫. –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω
                            const { error: resetError } = await supabaseAdmin.from('users').update({ last_start_message_id: null }).eq('id', userData.id);
                            if (resetError) console.error(`[Bot Handler /start] Failed to reset missing last_start_message_id:`, resetError);
                        } else {
                            // –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                            console.error(`[Bot Handler /start] Failed to delete previous message ${userData.lastMessageId}:`, deleteError);
                        }
                    });
            }

            // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥—ã
            let messageText, buttonText, buttonUrl;
            if (userData.claimed) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É (–∏–ª–∏ –Ω–µ –Ω–æ–≤—ã–π)
                messageText = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö –º–Ω–µ, –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.";
                buttonText = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç";
                buttonUrl = TMA_URL; // –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –õ–ö
            } else {
                // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É
                messageText = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
                buttonText = "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω";
                buttonUrl = `${TMA_URL}?action=claim_reward`; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –õ–ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
            }

            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log(`[Bot Handler /start] Sending new message (Claimed: ${userData.claimed})`);
            const sentMessage = await ctx.reply(messageText, {
                parse_mode: 'HTML', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è <b>
                reply_markup: {
                    inline_keyboard: [[{
                        text: buttonText,
                        web_app: { url: buttonUrl }
                    }]]
                }
            });
            console.log(`[Bot Handler /start] New message sent. ID: ${sentMessage.message_id}`);

            // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É
            const { error: updateError } = await supabaseAdmin
                .from('users')
                .update({ last_start_message_id: sentMessage.message_id })
                .eq('id', userData.id);

            if (updateError) {
                console.error(`[Bot Handler /start] Failed to update last_start_message_id for user ${userId}:`, updateError);
                // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            } else {
                console.log(`[Bot Handler /start] Updated last_start_message_id to ${sentMessage.message_id} for user ${userId}.`);
            }

        } catch (e) {
            console.error("[Bot Handler /start] CRITICAL Error in /start processing:", e);
            // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç,
            // –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏ Netlify.
             try {
                 await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.").catch(e => {}); // –¢–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
             } catch {}
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–º)
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler message:text] Text received.");
        const dreamText = ctx.message.text;
        const userId = ctx.from?.id;
        const chatId = ctx.chat.id;
        const messageId = ctx.message.message_id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if (!userId || !chatId) { console.warn("[Bot Handler message:text] No user ID or chat ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler message:text] Ignoring command.`); return; } // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

        console.log(`[Bot Handler message:text] Processing dream for ${userId}`);
        let statusMessage; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–†–ê–ó–£
            console.log(`[Bot Handler message:text] Attempting to delete user message ${messageId} in chat ${chatId}`);
            await ctx.api.deleteMessage(chatId, messageId).catch(delErr => {
                 // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message not found", –ª–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                 if (!(delErr instanceof GrammyError && delErr.error_code === 400 && delErr.description.includes("message to delete not found"))) {
                     console.warn(`[Bot Handler message:text] Failed to delete user message ${messageId}:`, delErr);
                 } else {
                      console.log(`[Bot Handler message:text] User message ${messageId} likely already deleted.`);
                 }
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            statusMessage = await ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
            if (!statusMessage) { // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –≤—ã—Ö–æ–¥–∏–º
                 console.error("[Bot Handler message:text] Failed to send status message.");
                 return;
            }

            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫—É)
            const analysisResult = await analyzeDream(ctx, supabaseAdmin, dreamText); // –ü–µ—Ä–µ–¥–∞–µ–º ctx –∏ supabaseAdmin

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
             console.log(`[Bot Handler message:text] Deleting status message ${statusMessage.message_id}`);
            await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(delErr => {
                 console.warn(`[Bot Handler message:text] Failed to delete status message ${statusMessage.message_id}:`, delErr);
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ª–∏ analyzeDream –æ—à–∏–±–∫—É
            // (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ analyzeDream –í–´–ë–†–ê–°–´–í–ê–ï–¢ –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö, –∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏)
            // –ï—Å–ª–∏ analyzeDream –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª –£–°–ü–ï–®–ù–´–ô –∞–Ω–∞–ª–∏–∑

            // --- –ò–ó–ú–ï–ù–ï–ù–û: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑, —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
            console.log(`[Bot Handler message:text] Analysis completed (result not sent to chat).`);
             const confirmationMessage = "–í–∞—à –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚ú®\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.";
             const sentConfirmation = await ctx.reply(confirmationMessage, {
                 reply_markup: { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app: { url: TMA_URL } }]] }
             }).catch(logReplyError);

             // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è? –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?
             // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º.

        } catch (error) {
             // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ analyzeDream –∏–ª–∏ –¥—Ä—É–≥–∏—Ö await
            console.error(`[Bot Handler message:text] Error processing dream for user ${userId}:`, error);
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...", –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å –∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            if (statusMessage) {
                await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(e => {});
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
             await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
        }
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bot.on('pre_checkout_query', async (ctx) => { /* ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç RPC)
    bot.on('message:successful_payment', async (ctx) => { /* ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bot.catch((err) => { /* ... */ });

    console.log("[Bot Global Init] Handlers configured successfully.");

} catch (error) {
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error;
    bot = null;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

// getOrCreateUser (—Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º id, claimed, lastMessageId)
async function getOrCreateUser(supabase, userId) {
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabase
            .from('users')
            .select('id, channel_reward_claimed, last_start_message_id') // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            .eq('tg_id', userId)
            .single();

        if (selectError && selectError.code !== 'PGRST116') throw selectError; // –û—à–∏–±–∫–∞, –Ω–æ –Ω–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        if (existingUser) {
             console.log(`[Bot:getOrCreateUser] Existing user found: ${userId}, ID: ${existingUser.id}, Claimed: ${existingUser.channel_reward_claimed}, LastMsg: ${existingUser.last_start_message_id}`);
             // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
             return {
                 id: existingUser.id,
                 claimed: existingUser.channel_reward_claimed ?? false, // –ï—Å–ª–∏ null, —Å—á–∏—Ç–∞–µ–º false
                 lastMessageId: existingUser.last_start_message_id
             };
        } else {
             console.log(`[Bot:getOrCreateUser] User ${userId} not found. Creating new user...`);
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            const { data: newUser, error: insertError } = await supabase
                .from('users')
                .insert({
                    tg_id: userId,
                    subscription_type: 'free',
                    tokens: 0, // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 —Ç–æ–∫–µ–Ω–æ–≤
                    channel_reward_claimed: false // –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
                    // last_start_message_id –±—É–¥–µ—Ç null –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 })
                .select('id') // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID
                .single();

            if (insertError) {
                 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–Ω–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                 if (insertError.code === '23505') {
                     console.warn(`[Bot:getOrCreateUser] Race condition likely for user ${userId}. Re-fetching...`);
                     let { data: raceUser, error: raceError } = await supabase.from('users').select('id, channel_reward_claimed, last_start_message_id').eq('tg_id', userId).single();
                     if (raceError) throw raceError;
                     if (raceUser) return { id: raceUser.id, claimed: raceUser.channel_reward_claimed ?? false, lastMessageId: raceUser.last_start_message_id };
                 }
                 throw insertError;
            }
            if (!newUser) throw new Error("User creation returned no data.");

            console.log(`[Bot:getOrCreateUser] Created new user: tg_id=${userId}, id=${newUser.id}`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return { id: newUser.id, claimed: false, lastMessageId: null };
        }
    } catch (error) {
        console.error(`[Bot:getOrCreateUser] CRITICAL error for ${userId}:`, error.message);
        // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (/start)
        throw new Error(`Failed to get or create user: ${error.message}`);
    }
}

// getGeminiAnalysis (–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏, –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
async function getGeminiAnalysis(dreamText) {
     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
     if (!geminiModel) {
         try {
             console.log("[getGeminiAnalysis] Initializing Gemini model (on demand)...");
             if (!GEMINI_API_KEY) throw new Error("GEMINI_API_KEY is not set.");
             if (!genAI) throw new Error("GoogleGenerativeAI instance (genAI) is not available."); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
             console.log("[getGeminiAnalysis] Gemini model initialized successfully.");
         } catch (initErr) {
             console.error("[getGeminiAnalysis] Failed to initialize Gemini model:", initErr);
             // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã analyzeDream –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
             return `–û—à–∏–±–∫–∞ getGeminiAnalysis: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ (${initErr.message})`;
         }
     }

     const MAX_DREAM_LENGTH = 4000;
     if (!dreamText || dreamText.trim().length === 0) return "–û—à–∏–±–∫–∞ getGeminiAnalysis: –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–Ω–∞.";
     if (dreamText.length > MAX_DREAM_LENGTH) return `–û—à–∏–±–∫–∞ getGeminiAnalysis: –°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH}).`;

     try {
         console.log("[getGeminiAnalysis] Requesting Gemini analysis...");
         const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
         const result = await geminiModel.generateContent(prompt);
         const response = await result.response;
         if (response.promptFeedback?.blockReason) {
             console.warn(`[getGeminiAnalysis] Gemini blocked: ${response.promptFeedback.blockReason}`);
             return `–û—à–∏–±–∫–∞ getGeminiAnalysis: –ê–Ω–∞–ª–∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (${response.promptFeedback.blockReason}).`;
         }
         const analysisText = response.text();
         if (!analysisText || analysisText.trim().length === 0) {
             console.error("[getGeminiAnalysis] Gemini returned empty response.");
             return "–û—à–∏–±–∫–∞ getGeminiAnalysis: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞.";
         }
         console.log("[getGeminiAnalysis] Gemini analysis received successfully.");
         return analysisText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
     } catch (error) {
         console.error("[getGeminiAnalysis] Error during Gemini API call:", error);
         if (error.message?.includes("API key not valid")) return "–û—à–∏–±–∫–∞ getGeminiAnalysis: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API Gemini.";
         else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) return "–û—à–∏–±–∫–∞ getGeminiAnalysis: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
         else if (error.message?.includes("quota")) return "–û—à–∏–±–∫–∞ getGeminiAnalysis: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Gemini API.";
         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ analyzeDream
         return `–û—à–∏–±–∫–∞ getGeminiAnalysis: –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞ (${error.message})`;
     }
}


// analyzeDream (–ò–∑–º–µ–Ω–µ–Ω–∞: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î)
async function analyzeDream(ctx, supabase, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); } // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

    let userDbId;
    try {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
        const userData = await getOrCreateUser(supabase, userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é
        userDbId = userData.id;
        if (!userDbId) { throw new Error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); } // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ê–¢–û–ú–ê–†–ù–û —á–µ—Ä–µ–∑ RPC
        console.log(`[analyzeDream] Checking and decrementing token for user ${userId}...`);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId });

        if (rpcError) {
            console.error(`[analyzeDream] RPC error for tg_id ${userId}:`, rpcError);
            throw new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤."); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }
        if (!tokenDecremented) {
            console.log(`[analyzeDream] Not enough tokens for user ${userId}.`);
            throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (—Ç–µ–∫—Å—Ç —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        }
        console.log(`[analyzeDream] Token successfully decremented for user ${userId}.`);

        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini
        console.log(`[analyzeDream] Requesting analysis for user ${userId}...`);
        const analysisResultText = await getGeminiAnalysis(dreamText); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

        // –ü–†–û–í–ï–†–Ø–ï–ú, –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ª–∏ getGeminiAnalysis —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        if (typeof analysisResultText === 'string' && analysisResultText.startsWith('–û—à–∏–±–∫–∞ getGeminiAnalysis:')) {
             console.warn(`[analyzeDream] Analysis failed for user ${userId}. Reason: ${analysisResultText}`);
             // –í–ê–ñ–ù–û: –¢–æ–∫–µ–Ω —É–∂–µ —Å–ø–∏—Å–∞–Ω! –ù—É–∂–Ω–æ –ª–∏ –µ–≥–æ –≤–µ—Ä–Ω—É—Ç—å? –ü–æ–∫–∞ –Ω–µ—Ç.
             // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç Gemini
             throw new Error(analysisResultText.replace('–û—à–∏–±–∫–∞ getGeminiAnalysis: ', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: '));
        }

        // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
        console.log(`[analyzeDream] Analysis successful for user ${userId}. Saving to DB...`);
        const { error: insertError } = await supabase
            .from('analyses')
            .insert({
                user_id: userDbId,
                dream_text: dreamText, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–Ω–∞
                analysis: analysisResultText // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            });

        if (insertError) {
            console.error(`[analyzeDream] Error saving analysis to DB for user ${userId} (dbId ${userDbId}):`, insertError);
            // –¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω, –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º.
            throw new Error("–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é."); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }

        console.log(`[analyzeDream] Analysis saved successfully for user ${userId}.`);
        // –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Ç.–∫. —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω—É–∂–µ–Ω –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        return; // –Ø–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    } catch (error) {
        // –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –±–ª–æ–∫–∞ try (–≤–∫–ª—é—á–∞—è –Ω–µ—Ö–≤–∞—Ç–∫—É —Ç–æ–∫–µ–Ω–æ–≤, –æ—à–∏–±–∫–∏ Gemini, –æ—à–∏–±–∫–∏ DB)
        console.error(`[analyzeDream] Error caught for user ${userId}: ${error.message}`);
        // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ 'message:text'
        // –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        throw error;
    }
}

// logReplyError (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }


// --- –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Netlify —Å webhookCallback ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");

    if (initializationError || !bot) {
        console.error("[Netlify Handler] Bot initialization failed previously.", initializationError);
        return { statusCode: 500, body: "Internal Server Error: Bot failed to initialize." };
    }

    try {
        const callback = webhookCallback(bot, 'aws-lambda');
        console.log("[Netlify Handler] Calling webhookCallback...");
        // –ü–µ—Ä–µ–¥–∞–µ–º 'event' –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è aws-lambda –∞–¥–∞–ø—Ç–µ—Ä–∞
        const response = await callback(event);
        console.log("[Netlify Handler] webhookCallback finished. Response status:", response.statusCode);
        return response;
    } catch (error) {
        console.error("[Netlify Handler] CRITICAL error during webhookCallback:", error);
        return { statusCode: 500, body: "Internal Server Error" }; // –û—Ç–≤–µ—á–∞–µ–º 500, —Ç.–∫. —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
    }
};

console.log("[Bot Global Init] Netlify handler configured with webhookCallback.");
