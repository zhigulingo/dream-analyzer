const { Telegraf } = require('telegraf');
const { validateDream, checkSubscription } = require('../src/utils');
const { getUser, updateUserTokens, storeAnalysis } = require('../src/database');
const { analyzeDream } = require('../src/gemini');
const { sendInvoice } = require('../src/payments');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ 
bot.start((ctx) => {
  ctx.reply('üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dream Analyzer!*', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            web_app: { url: 'https://tourmaline-eclair-9d40ea.netlify.app' } // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ Mini App –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
          }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  if (!validateDream(text)) {
    ctx.reply('–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —á–∏—Å–µ–ª –∏–ª–∏ —ç–º–æ–¥–∑–∏.');
    return;
  }
  const isSubscribed = await checkSubscription(bot, ctx.from.id);
  if (!isSubscribed) {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @TheDreamsHub –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');
    return;
  }
  const user = await getUser(ctx.from.id);
  if (user.tokens <= 0) {
    ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /buy_basic –∏–ª–∏ /buy_premium');
    return;
  }
  await updateUserTokens(user.id, user.tokens - 1);
  ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω...');
  const analysis = await analyzeDream(text);
  await storeAnalysis(user.id, text, analysis);
  ctx.reply(`–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞: ${analysis}`);
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
bot.command('buy_basic', (ctx) => sendInvoice(bot, ctx, 'basic'));
bot.command('buy_premium', (ctx) => sendInvoice(bot, ctx, 'premium'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true));

bot.on('successful_payment', async (ctx) => {
  const tariff = ctx.message.successful_payment.invoice_payload;
  const updates = {
    basic: { tokens: 15, subscription_type: 'basic' },
    premium: { tokens: 30, subscription_type: 'premium' },
  };
  const { error } = await supabase
    .from('users')
    .update(updates[tariff])
    .eq('tg_id', ctx.from.id);
  if (error) {
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞');
    return;
  }
  ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ ${tariff}!`);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Netlify Functions
exports.handler = async (event, context) => {
  try {
    await bot.handleUpdate(JSON.parse(event.body));
    return { statusCode: 200, body: 'OK' };
  } catch (error) {
    console.error('Error handling update:', error);
    return { statusCode: 500, body: 'Error' };
  }
};
