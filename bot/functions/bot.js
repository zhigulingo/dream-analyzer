// –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Node.js —Å—Ä–µ–¥–µ Netlify Functions (CommonJS)
const { Bot, session } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è (Netlify –∏—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç) ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Role Key
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL || "YOUR_TMA_URL"; // –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_TMA_URL –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Netlify

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY) {
  console.error("CRITICAL ERROR: Missing required environment variables!");
  // –ó–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—è–º–±–¥–µ –Ω–µ –ª—É—á—à–∞—è –∏–¥–µ—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
  // throw new Error("Missing required environment variables!"); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–ª–∏–µ–Ω—Ç–æ–≤ ---
let supabaseAdmin;
let genAI;
let geminiModel;

try {
    // –ö–ª–∏–µ–Ω—Ç Supabase —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Service Role)
    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
        auth: {
            autoRefreshToken: false,
            persistSession: false
        }
    });
    console.log("Supabase Admin Client initialized.");

    // –ö–ª–∏–µ–Ω—Ç Google Generative AI
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    geminiModel = genAI.getGenerativeModel({ model: "gemini-pro" });
    console.log("Gemini Client initialized (model gemini-pro).");

} catch (initError) {
    console.error("CRITICAL ERROR during client initialization:", initError);
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å–º–æ–∂–µ—Ç
    // throw initError; // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
}

// --- –§—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
 * @param {number} userId - Telegram User ID
 * @returns {Promise<number | null>} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function getOrCreateUser(userId) {
  if (!supabaseAdmin) {
      console.error("Supabase client not initialized in getOrCreateUser");
      return null;
  }
  try {
    let { data: existingUser, error: selectError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('tg_id', userId)
      .single();

    if (selectError && selectError.code !== 'PGRST116') { // PGRST116 - –∫–æ–¥ "No rows found"
      console.error(`Error finding user ${userId}:`, selectError);
      return null;
    }

    if (existingUser) {
      return existingUser.id;
    } else {
      console.log(`User ${userId} not found, creating...`);
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          tg_id: userId,
          subscription_type: 'free',
          tokens: 1 // –î–∞–µ–º 1 –ø—Ä–æ–±–Ω—ã–π —Ç–æ–∫–µ–Ω
        })
        .select('id')
        .single();

      if (insertError) {
        console.error(`Error creating user ${userId}:`, insertError);
        return null;
      }

      if (newUser) {
        console.log(`Created new user: tg_id=${userId}, id=${newUser.id}`);
        return newUser.id;
      } else {
        console.error(`Failed to get new user ID for ${userId} after insert.`);
        return null;
      }
    }
  } catch (error) {
    console.error(`Critical error in getOrCreateUser for ${userId}:`, error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –æ—Ç Gemini API.
 * @param {string} dreamText - –¢–µ–∫—Å—Ç —Å–Ω–∞.
 * @returns {Promise<string | null>} –°—Ç—Ä–æ–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º.
 */
async function getGeminiAnalysis(dreamText) {
  if (!geminiModel) {
      console.error("Gemini client not initialized in getGeminiAnalysis");
      return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.";
  }
  if (!dreamText || dreamText.trim().length === 0) {
      return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
  }
  const MAX_DREAM_LENGTH = 4000;
  if (dreamText.length > MAX_DREAM_LENGTH) {
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à —Å–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—á–µ.`;
  }

  try {
    console.log("Requesting analysis from Gemini...");
    const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–∑–±–µ–≥–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –±—É–¥—É—â–µ–≥–æ.
–°–æ–Ω: "${dreamText}"

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞), —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞:
1.  –í–æ–∑–º–æ–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–Ω–∞.
2.  –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –∏—Ö —Å–≤—è–∑–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ).
3.  –û–±—â–∏—Ö —Ç–µ–º–∞—Ö –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–æ —Å–Ω–µ.
–û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, —á—Ç–æ –¥–µ–ª–∞—Ç—å.`;

    const result = await geminiModel.generateContent(prompt);
    const response = await result.response;

    // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ safetyRatings (–µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    if (response.promptFeedback?.blockReason) {
        console.warn(`Gemini analysis blocked for safety reasons: ${response.promptFeedback.blockReason}`, response.promptFeedback.safetyRatings);
        return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (${response.promptFeedback.blockReason}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞.`;
    }

    const analysisText = response.text();

    console.log("Gemini analysis received.");
    if (!analysisText || analysisText.trim().length === 0) {
        console.error("Gemini returned an empty response.");
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).";
    }

    return analysisText;

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ error.message, error.stack
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞.
 * @param {object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammy.
 * @param {string} dreamText - –¢–µ–∫—Å—Ç —Å–Ω–∞.
 */
async function analyzeDream(ctx, dreamText) {
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(e => console.error("Reply error:", e));
    return;
  }
  if (!supabaseAdmin) {
      console.error("Supabase client not initialized in analyzeDream");
      await ctx.reply("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.").catch(e => console.error("Reply error:", e));
      return;
  }

  // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  const userDbId = await getOrCreateUser(userId);
  if (!userDbId) {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(e => console.error("Reply error:", e));
      return;
  }

  // 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω –ê–¢–û–ú–ê–†–ù–û —á–µ—Ä–µ–∑ RPC
  await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...").catch(e => console.error("Reply error:", e));
  try {
      const { data: tokenDecremented, error: rpcError } = await supabaseAdmin
          .rpc('decrement_token_if_available', { user_tg_id: userId });

      if (rpcError) {
          console.error(`RPC error decrement_token_if_available for tg_id ${userId}:`, rpcError);
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(e => console.error("Reply error:", e));
          return;
      }

      if (!tokenDecremented) {
          console.log(`Not enough tokens for user tg_id ${userId}.`);
          await ctx.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.", {
             reply_markup: {
                 inline_keyboard: [
                   [{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }],
                 ],
             },
          }).catch(e => console.error("Reply error:", e));
          return;
      }

      // 3. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω - –≤—ã–∑—ã–≤–∞–µ–º Gemini
      console.log(`Token decremented for tg_id ${userId}. Calling Gemini...`);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º editMessageText, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤..."
      const processingMessage = await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.").catch(e => console.error("Reply error:", e));

      const analysisResult = await getGeminiAnalysis(dreamText);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ Gemini –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
      const isErrorResult = !analysisResult ||
                            analysisResult.startsWith("–ò–∑–≤–∏–Ω–∏—Ç–µ,") ||
                            analysisResult.startsWith("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") ||
                            analysisResult.startsWith("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,") ||
                            analysisResult.startsWith("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,") ||
                            analysisResult.startsWith("–û—à–∏–±–∫–∞:");

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω..." –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
      if (processingMessage) {
          await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.error("Delete message error:", e));
      }

      if (isErrorResult) {
          await ctx.reply(analysisResult || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑.").catch(e => console.error("Reply error:", e));
          console.warn(`Analysis for tg_id ${userId} failed or was blocked, but token was consumed.`);
          // TODO: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä, blockReason)
          return;
      }

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
      const { error: insertAnalysisError } = await supabaseAdmin
          .from('analyses')
          .insert({
              user_id: userDbId,
              dream_text: dreamText,
              analysis: analysisResult // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          });

      if (insertAnalysisError) {
          console.error(`Error saving analysis for user_id ${userDbId}:`, insertAnalysisError);
          await ctx.reply("–í–∞—à —Å–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.").catch(e => console.error("Reply error:", e));
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ, —Ä–∞–∑ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω
          await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n${analysisResult}`).catch(e => console.error("Reply error:", e));
          return;
      }

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`Analysis for tg_id ${userId} successful, saved, and sent.`);
      await ctx.reply(`–í–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞:\n\n${analysisResult}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`, {
        reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }],
            ],
        },
      }).catch(e => console.error("Reply error:", e));

  } catch (error) {
      console.error(`Critical error in analyzeDream for tg_id ${userId}:`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–Ω–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.").catch(e => console.error("Reply error:", e));
  }
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–æ—Ç–∞ ---
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
const bot = BOT_TOKEN ? new Bot(BOT_TOKEN) : null;

if (bot) {
    // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π (–º–æ–∂–Ω–æ –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    // bot.use(session({ initial: () => ({}) }));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command("start", async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) {
        console.warn("Received /start without user ID");
        return;
      }
      console.log(`User ${userId} started bot.`);
      try {
          await getOrCreateUser(userId); // Ensure user exists
          await ctx.reply(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –°–Ω–æ–≤! ‚ú®\n\n" +
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –≤–∞—à–∏—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n" +
            "–£ –≤–∞—Å –µ—Å—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ —Ä–∞—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å.\n\n" +
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏.",
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }],
                ],
              },
            }
          ).catch(e => console.error("Reply error:", e));
      } catch(e) {
          console.error("Error in /start handler:", e);
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.").catch(e => console.error("Reply error:", e));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞)
    bot.on("message:text", async (ctx) => {
      const dreamText = ctx.message.text;
      const userId = ctx.from?.id;
      if (!userId) {
          console.warn("Received text message without user ID");
          return;
      }
      console.log(`Received text from ${userId}: "${dreamText}"`);

      if (dreamText.startsWith('/')) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        console.log(`Ignoring command: ${dreamText}`);
        return;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞
      await analyzeDream(ctx, dreamText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.catch((err) => {
      const ctx = err.ctx;
      console.error(`Error while handling update ${ctx.update.update_id}:`);
      const e = err.error;
      if (e instanceof Error) {
        console.error("Error:", e.stack || e.message);
      } else {
        console.error("Unknown error object:", e);
      }
      // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    });

} else {
    console.error("CRITICAL ERROR: Bot token not found, bot cannot be initialized!");
}

// --- –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Netlify ---
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π `exports.handler` –¥–ª—è CommonJS –æ–∫—Ä—É–∂–µ–Ω–∏—è Netlify
exports.handler = async (event) => {
    if (!bot) {
        console.error("Handler called but bot is not initialized!");
        return { statusCode: 500, body: "Internal Server Error: Bot not initialized" };
    }
    if (!event.body) {
         console.warn("Handler called without event body");
         return { statusCode: 400, body: "Bad Request: Missing event body" };
    }

    try {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Update –æ—Ç Telegram) –≤ grammy
        await bot.handleUpdate(JSON.parse(event.body));
        // Telegram –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç 200 OK, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω
        return { statusCode: 200, body: "" };
    } catch (error) {
        console.error("Error in Netlify handler:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 500, —á—Ç–æ–±—ã Telegram –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        return { statusCode: 500, body: "Internal Server Error" };
    }
};

console.log("Netlify function bot.js loaded."); // –õ–æ–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
