// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ6: –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å await bot.init())

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError } = require("grammy"); // –£–±—Ä–∞–ª–∏ webhookCallback
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
// (–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≤–µ—Ä–Ω—ã –≤ Netlify)
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---
// getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError
// (–ò—Ö –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö)
async function getOrCreateUser(supabase, userId) {
    // ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ —Å tokens: 0) ...
     if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
     try {
         let { data: existingUser, error: selectError } = await supabase.from('users').select('id, tokens').eq('tg_id', userId).single();
         if (selectError && selectError.code !== 'PGRST116') { console.error(`[Bot:getOrCreateUser] Error selecting user ${userId}:`, selectError); throw selectError; }
         if (existingUser) { console.log(`[Bot:getOrCreateUser] Existing user found: tg_id=${userId}, id=${existingUser.id}, tokens=${existingUser.tokens}`); return existingUser.id; }
         else {
             console.log(`[Bot:getOrCreateUser] User ${userId} not found. Creating...`);
             const { data: newUser, error: insertError } = await supabase.from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 0, channel_reward_claimed: false }).select('id').single();
             if (insertError) {
                 console.error(`[Bot:getOrCreateUser] Error inserting new user ${userId}:`, insertError);
                 if (insertError.code === '23505') { console.warn(`[Bot:getOrCreateUser] Race condition likely for user ${userId}. Trying to fetch again.`); let { data: raceUser, error: raceError } = await supabase.from('users').select('id').eq('tg_id', userId).single(); if (raceError) throw raceError; if (raceUser) return raceUser.id; }
                 throw insertError;
             }
             if (!newUser) { throw new Error("User creation successful but returned no data."); }
             console.log(`[Bot:getOrCreateUser] Created new user: tg_id=${userId}, id=${newUser.id}, initial tokens=0`);
             return newUser.id;
         }
     } catch (error) { console.error(`[Bot:getOrCreateUser] Critical error for user ${userId}:`, error.message); return null; }
}
async function getGeminiAnalysis(geminiModel, dreamText) {
    // ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if (!geminiModel) { console.error("[Bot] Gemini model is null or undefined in getGeminiAnalysis."); return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."; }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;
    try {
        console.log("[Bot] Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response;
        if (response.promptFeedback?.blockReason) { console.warn(`[Bot] Gemini blocked: ${response.promptFeedback.blockReason}`); return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}).`; }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) { console.error("[Bot] Gemini returned empty response."); return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)."; }
        console.log("[Bot] Gemini analysis received successfully.");
        return analysisText;
    } catch (error) {
        console.error("[Bot] Error explicitly caught in getGeminiAnalysis:", error);
         if (error.message?.includes("API key not valid")) { return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API."; }
         else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) { return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."; }
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞.";
    }
}
async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    // ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        userDbId = await getOrCreateUser(supabase, userId);
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.").catch(logReplyError); return; }
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabase.rpc('decrement_token_if_available', { user_tg_id: userId });
        if (rpcError) { console.error(`[Bot:analyzeDream] RPC error for tg_id ${userId}:`, rpcError); throw new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.");}
        if (!tokenDecremented) {
             console.log(`[Bot:analyzeDream] Not enough tokens for ${userId}.`);
             if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {});
             const noTokensMessage = "–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üòü\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.";
             const buttons = [];
             if (TMA_URL) { buttons.push([{ text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω", web_app: { url: `${TMA_URL}?action=claim_reward` } }]); }
             if (TMA_URL) { buttons.push([{ text: "üõí –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", web_app: { url: TMA_URL } }]); }
             await ctx.reply(noTokensMessage, { reply_markup: { inline_keyboard: buttons } }).catch(logReplyError);
             return;
        }
        console.log(`[Bot:analyzeDream] Token decremented for ${userId}.`);
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }
        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); processingMessage = null; }
        const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));
        if (isErrorResult) { await ctx.reply(analysisResult || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError); console.warn(`[Bot] Analysis failed for ${userId}, token consumed.`); return; }
        const { error: insertError } = await supabase.from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });
        if (insertError) { console.error(`[Bot] Error saving analysis for ${userDbId}:`, insertError); await ctx.reply("–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n" + analysisResult).catch(logReplyError); return; }
        console.log(`[Bot] Analysis successful for ${userId}.`);
        await ctx.reply(`–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n\n${analysisResult}\n\n–¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω. –ò—Å—Ç–æ—Ä–∏—è –≤ –õ–ö.`, { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError);
    } catch (error) {
        console.error(`[Bot] Critical error in analyzeDream for ${userId}:`, error.message);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); }
        await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
    }
}
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }


// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked."); // –õ–æ–≥ –≤—ã–∑–æ–≤–∞

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        console.error("[Netlify Handler] FATAL: Missing environment variables!");
        return { statusCode: 500, body: "Configuration missing." };
    }

    // --- –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
    let update;
    try {
        if (!event.body) { console.warn("[Netlify Handler] Empty event body."); return { statusCode: 400, body: "Bad Request: Empty body" }; }
        update = JSON.parse(event.body);
        console.log(`[Netlify Handler] Parsed update ID: ${update.update_id}`);
    } catch (e) {
        console.error("[Netlify Handler] Invalid JSON body:", e);
        return { statusCode: 400, body: "Invalid JSON body" };
    }

    let bot;
    let supabaseAdmin;
    let geminiModel;

    try {
        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –í–ù–£–¢–†–ò —Ö–µ–Ω–¥–ª–µ—Ä–∞ ---
        console.log("[Netlify Handler] Initializing clients...");
        supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
        bot = new Bot(BOT_TOKEN);
        console.log("[Netlify Handler] Basic bot instance created.");

        // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–í–ê–ñ–ù–û!) ---
        console.log("[Netlify Handler] Initializing bot (calling bot.init)...");
        await bot.init(); // <<<--- –í–´–ó–´–í–ê–ï–ú bot.init() –ó–î–ï–°–¨
        console.log("[Netlify Handler] Bot initialized successfully.");

        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
        console.log("[Netlify Handler] Setting up handlers...");

        bot.command("start", async (ctx) => {
            console.log("[Bot Handler /start] Command received.");
            const userId = ctx.from?.id;
            if (!userId) { console.warn("[Bot Handler /start] No user ID."); return; }
            console.log(`[Bot Handler /start] User ${userId}`);
            try {
                await getOrCreateUser(supabaseAdmin, userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π supabaseAdmin
                console.log(`[Bot Handler /start] Ensured user ${userId} exists.`);
                const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
                const buttonUrl = `${TMA_URL}?action=claim_reward`;
                await ctx.reply(welcomeMessage, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [[{ text: "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω", web_app: { url: buttonUrl } }]] } }).catch(logReplyError);
                console.log(`[Bot Handler /start] Welcome message sent to ${userId}.`);
            } catch (e) { console.error("[Bot Handler /start] Error:", e); await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start.").catch(logReplyError); }
        });

        bot.on("message:text", async (ctx) => {
            console.log("[Bot Handler message:text] Text received.");
            const dreamText = ctx.message.text;
            const userId = ctx.from?.id;
            if (!userId) { console.warn("[Bot Handler message:text] No user ID."); return; }
            if (dreamText.startsWith('/')) { console.log(`[Bot Handler message:text] Ignoring command.`); return; }
            console.log(`[Bot Handler message:text] Processing dream for ${userId}`);
            await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        });

        bot.on('pre_checkout_query', async (ctx) => { /* ... */ });
        bot.on('message:successful_payment', async (ctx) => { /* ... (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π supabaseAdmin) ... */ });
        bot.catch((err) => { /* ... */ });

        console.log("[Netlify Handler] Handlers configured.");

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
        console.log(`[Netlify Handler] Processing update ${update.update_id} with bot.handleUpdate...`);
        await bot.handleUpdate(update);
        console.log(`[Netlify Handler] bot.handleUpdate finished for update ${update.update_id}.`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram
        return { statusCode: 200, body: "" };

    } catch (error) {
        // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –æ—à–∏–±–∫–∏ handleUpdate
        console.error(`[Netlify Handler] UNEXPECTED error during handler execution for update ${update?.update_id}:`, error);
        // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ catch, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        return {
            statusCode: error instanceof GrammyError && error.error_code === 401 ? 401 : 500, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 401, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            body: "Internal Server Error processing update."
        };
    }
};
