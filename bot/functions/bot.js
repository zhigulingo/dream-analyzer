// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ4: –ò—Å–ø–æ–ª—å–∑—É–µ–º webhookCallback)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy"); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ webhookCallback –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –ì–õ–û–ë–ê–õ–¨–ù–û, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
let bot;
let supabaseAdmin;
let geminiModel;
let initializationError = null; // –•—Ä–∞–Ω–∏–º –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

try {
    console.log("[Bot Global Init] Initializing clients and bot...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        throw new Error("FATAL: Missing environment variables!");
    }
    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Basic bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received."); // <--- –õ–û–ì
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot Handler /start] No user ID."); return; }
        console.log(`[Bot Handler /start] User ${userId}`);
        try {
            await getOrCreateUser(supabaseAdmin, userId); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π supabaseAdmin
            console.log(`[Bot Handler /start] Ensured user ${userId} exists.`);
            const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π **–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω** –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
            const buttonUrl = `${TMA_URL}?action=claim_reward`;
            await ctx.replyWithMarkdown(welcomeMessage, { reply_markup: { inline_keyboard: [[{ text: "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω", web_app: { url: buttonUrl } }]] } }).catch(logReplyError);
            console.log(`[Bot Handler /start] Welcome message sent to ${userId}.`);
        } catch (e) { console.error("[Bot Handler /start] Error:", e); await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.").catch(logReplyError); }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler message:text] Text received."); // <--- –õ–û–ì
        const dreamText = ctx.message.text;
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot Handler message:text] No user ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler message:text] Ignoring command.`); return; }
        console.log(`[Bot Handler message:text] Processing dream for ${userId}`);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
    bot.on('pre_checkout_query', async (ctx) => { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç RPC)
    bot.on('message:successful_payment', async (ctx) => { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π supabaseAdmin) ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    bot.catch((err) => { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ });

    console.log("[Bot Global Init] Handlers configured successfully.");

} catch (error) {
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
    // –ù–µ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å bot, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
    bot = null;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---
// (getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å)
async function getOrCreateUser(supabase, userId) { /* ... –≤–∞—à –∫–æ–¥ —Å tokens: 0 ... */ }
async function getGeminiAnalysis(geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
async function analyzeDream(ctx, supabase, geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function —Å webhookCallback ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked."); // –õ–æ–≥ –≤—ã–∑–æ–≤–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (initializationError || !bot) {
        console.error("[Netlify Handler] Bot initialization failed previously. Returning 500.", initializationError);
        return { statusCode: 500, body: "Internal Server Error: Bot failed to initialize." };
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è AWS Lambda (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Netlify)
        const callback = webhookCallback(bot, 'aws-lambda');
        console.log("[Netlify Handler] Calling webhookCallback...");

        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ Netlify –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ grammY
        const response = await callback(event);
        console.log("[Netlify Handler] webhookCallback finished. Response status:", response.statusCode);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π grammY
        return response;

    } catch (error) {
        // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –í–ù–£–¢–†–ò webhookCallback,
        // —Ö–æ—Ç—è bot.catch –¥–æ–ª–∂–µ–Ω –ª–æ–≤–∏—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –Ω–∏—Ö.
        console.error("[Netlify Handler] CRITICAL error during webhookCallback execution:", error);
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: "Internal Server Error during webhook processing." })
        };
    }
};
