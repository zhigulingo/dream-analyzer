// tma/src/services/api.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è)
import axios from 'axios';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –ó–ê–î–ê–ù–ê –≤ Netlify UI –¥–ª—è —Å–∞–π—Ç–∞ TMA
// –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ü–û–õ–ù–´–ô –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏—è–º (–≤–∫–ª—é—á–∞—è /.netlify/functions)
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || `${window.location.origin}/.netlify/functions`;

// –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ TMA
if (!import.meta.env.VITE_API_BASE_URL) {
    console.warn("VITE_API_BASE_URL not set in environment variables, falling back to current origin:", API_BASE_URL);
} else {
    console.log('[api.js] Using API Base URL:', API_BASE_URL);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Axios —Å –±–∞–∑–æ–≤—ã–º URL
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000 // –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
});

// Debug helper to dump all localStorage items
function debugLocalStorage() {
  console.log('[api.js] üîç DEBUG localStorage contents:');
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    try {
      const value = localStorage.getItem(key);
      console.log(`[api.js] üîë ${key}: ${value.substring(0, 50)}${value.length > 50 ? '...' : ''}`);
    } catch (e) {
      console.log(`[api.js] üîë ${key}: [Error reading value]`);
    }
  }
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Init-Data
apiClient.interceptors.request.use(
  (config) => {
    // Always log the URL being called for debugging
    console.log(`[api.js] Making request to: ${config.method.toUpperCase()} ${config.url}`);
    
    // Dump all localStorage items to aid debugging
    debugLocalStorage();
    
    // APPROACH 1: Telegram WebApp initData
    const initData = window.Telegram?.WebApp?.initData;
    if (initData) {
      config.headers['X-Telegram-Init-Data'] = initData;
      console.log("[api.js] USING APPROACH 1: Telegram WebApp");
      return config;
    }
    
    // APPROACH 2: Web Auth from localStorage
    try {
      const storedUser = localStorage.getItem('telegram_user');
      if (storedUser) {
        const userData = JSON.parse(storedUser);
        if (userData && userData.id) {
          // Force to use custom header format
          const headerData = JSON.stringify({
            id: userData.id,
            username: userData.username || "",
            first_name: userData.first_name || "",
            last_name: userData.last_name || ""
          });
          
          // Set header in both formats to ensure compatibility with server expectations
          config.headers['x-web-auth-user'] = headerData;
          config.headers['X-Web-Auth-User'] = headerData;
          
          // Log that we're sending authentication 
          console.log(`[api.js] USING APPROACH 2: Web Auth, User ID: ${userData.id}`);
          console.log(`[api.js] Headers being sent: ${Object.keys(config.headers).join(', ')}`);
          console.log(`[api.js] Auth header content: ${headerData}`);
          
          return config;
        }
      }
    } catch (err) {
      console.error("[api.js] Failed to parse stored user data:", err);
    }
    
    // NO AUTH AVAILABLE
    console.warn("[api.js] ‚ö†Ô∏è NO AUTHENTICATION AVAILABLE. API calls will fail authorization.");
    console.warn("[api.js] ‚ö†Ô∏è To debug, localStorage contains:", Object.keys(localStorage));
    console.warn("[api.js] ‚ö†Ô∏è Headers being sent without auth:", Object.keys(config.headers).join(', '));
    
    return config;
  },
  (error) => {
    console.error("[api.js] Axios request interceptor error:", error);
    return Promise.reject(error);
  }
);

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response) => {
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return response;
  },
  async (error) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ (—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
    if (error.response) {
      // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å –Ω–µ 2xx)
      console.error('[api.js] Axios response error (from server):', {
          message: error.message,
          url: error.config?.url,
          method: error.config?.method,
          status: error.response?.status,
          data: error.response?.data, // –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –æ—Ç –±—ç–∫–µ–Ω–¥–∞
      });
      
      // Special handling for 401 (Unauthorized) errors
      if (error.response.status === 401) {
        console.error('[api.js] UNAUTHORIZED (401) detected - marking as auth_error');
        
        // Mark auth error in session storage to trigger router handling
        sessionStorage.setItem('auth_error', 'true');
        
        // Load auth service dynamically to avoid circular dependencies
        try {
          const authService = await import('./authService');
          
          // Only redirect on non-auth URLs (avoid infinite loop)
          const isAuthUrl = error.config.url.includes('verify-web-auth') || 
                           error.config.url.includes('login');
                           
          // If this is not an auth endpoint, trigger emergency redirect
          if (!isAuthUrl) {
            console.log('[api.js] Triggering emergency redirect due to 401');
            authService.emergencyRedirect();
          }
        } catch (e) {
          console.error('[api.js] Failed to load auth service for 401 handling', e);
        }
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —Ç–∞–π–º–∞—É—Ç)
      console.error('[api.js] Axios network error (no response):', {
          message: error.message,
          url: error.config?.url,
          method: error.config?.method,
          code: error.code, // e.g., 'ECONNABORTED' for timeout
      });
    } else {
      // –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      console.error('[api.js] Axios request setup error:', error.message);
    }
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—Ç–æ—Ä–µ –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    return Promise.reject(error);
  }
);

// –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ API –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ —Å—Ç–æ—Ä–æ–≤/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const apiMethods = {
  getUserProfile() {
    console.log("[api.js] Calling GET /user-profile");
    return apiClient.get('/user-profile');
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
  claimChannelReward() {
    console.log("[api.js] Calling POST /claim-channel-token");
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω)
    return apiClient.post('/claim-channel-token'); // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω—É–∂–Ω–æ, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ initData
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
  getAnalysesHistory() {
    console.log("[api.js] Calling GET /analyses-history");
    return apiClient.get('/analyses-history');
  },

  // <<<--- –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê ---
  getDeepAnalysis() {
    console.log("[api.js] Calling POST /deep-analysis");
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω—É–∂–Ω–æ, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ InitData –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    return apiClient.post('/deep-analysis');
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å
  createInvoiceLink(plan, duration, amount, payload) {
     console.log("[api.js] Calling POST /create-invoice");
     // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–ª–µ POST-–∑–∞–ø—Ä–æ—Å–∞
    return apiClient.post('/create-invoice', {
        plan,
        duration,
        amount,
        payload
    });
  },

  // Web authentication verification
  verifyWebAuth(userData) {
    console.log("[api.js] Calling POST /verify-web-auth");
    return apiClient.post('/verify-web-auth', userData);
  },
  
  // Logout helper - not an actual API call but helps with cleanup
  logout() {
    console.log("[api.js] Performing API cleanup for logout");
    // Clear any cached auth tokens or session data in the API client
    delete apiClient.defaults.headers.common['x-web-auth-user'];
    delete apiClient.defaults.headers.common['X-Web-Auth-User'];
    delete apiClient.defaults.headers.common['X-Telegram-Init-Data'];
    return Promise.resolve({ success: true });
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Axios (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –Ω–∞–ø—Ä—è–º—É—é)
// –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ API
export { apiClient };
export default apiMethods;
