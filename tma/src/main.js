// tma/src/main.js
import { createApp } from 'vue'
import { createPinia } from 'pinia'

import App from './App.vue' // –í–∞—à –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Vue
// import router from './router' // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Vue Router

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
import "./index.css"
// import './assets/main.css'

console.log('üöÄ [MAIN] Starting Vue app initialization...');
console.log('üöÄ [MAIN] Current URL:', window.location.href);
console.log('üöÄ [MAIN] Telegram WebApp available:', typeof window !== 'undefined' && window.Telegram?.WebApp);

const app = createApp(App)

app.use(createPinia()) // –ü–æ–¥–∫–ª—é—á–∞–µ–º Pinia
// app.use(router) // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å

app.mount('#app') // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ <div id="app"> –∏–∑ index.html

console.log('‚úÖ [MAIN] Vue app mounted successfully');

// –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const detectDevice = () => {
  console.log('üîç [DETECT] Starting device detection...');

  const userAgent = navigator.userAgent.toLowerCase();
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;
  const platform = navigator.platform;

  console.log('üîç [DETECT] UserAgent:', userAgent);
  console.log('üîç [DETECT] Screen size:', screenWidth + 'x' + screenHeight);
  console.log('üîç [DETECT] Platform:', platform);

  // –ü–†–û–í–ï–†–ö–ê: —ç—Ç–æ Telegram WebApp?
  const isTelegramWebApp = typeof window !== 'undefined' && window.Telegram?.WebApp;
  console.log('üîç [DETECT] Is Telegram WebApp:', isTelegramWebApp);

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ï–¢–ï–ö–¶–ò–Ø –ú–û–ë–ò–õ–¨–ù–´–•
  const isMobileByUA = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile|tablet/i.test(userAgent);
  const isMobileByScreen = (screenWidth <= 768 && screenHeight <= 1024);
  const hasTouch = ('ontouchstart' in window);
  const isPortrait = screenWidth <= screenHeight && screenWidth < 768;

  console.log('üîç [DETECT] Mobile by UA:', isMobileByUA);
  console.log('üîç [DETECT] Mobile by screen:', isMobileByScreen);
  console.log('üîç [DETECT] Has touch:', hasTouch);
  console.log('üîç [DETECT] Is portrait:', isPortrait);

  // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π —ç–∫—Ä–∞–Ω –ò–õ–ò touch
  const isMobile = isMobileByUA || isMobileByScreen || hasTouch || isPortrait;

  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –±–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã –Ω–µ —Å—á–∏—Ç–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–º–∏
  const isLargeScreen = screenWidth > 1024 && screenHeight > 768;
  const finalIsMobile = isMobile && !isLargeScreen;

  console.log('üîç [DETECT] Initial mobile result:', isMobile);
  console.log('üîç [DETECT] Is large screen:', isLargeScreen);
  console.log('üîç [DETECT] FINAL MOBILE DECISION:', finalIsMobile);

  const isIOS = /iphone|ipad|ipod/i.test(userAgent);
  const isAndroid = /android/i.test(userAgent);

  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –î–õ–Ø –î–ï–°–ö–¢–û–ü–ê
  const isDesktopByUA = /windows|macintosh|linux/i.test(userAgent) &&
                       !/mobile|tablet|android|iphone|ipad|ipod/i.test(userAgent);
  const isDesktopByScreen = screenWidth > 1024 && screenHeight > 768;
  const isDesktop = isDesktopByUA && isDesktopByScreen && !finalIsMobile;

  console.log('üîç [DETECT] Desktop by UA:', isDesktopByUA);
  console.log('üîç [DETECT] Desktop by screen:', isDesktopByScreen);
  console.log('üîç [DETECT] FINAL DESKTOP DECISION:', isDesktop);

  const result = {
    isMobile: finalIsMobile,
    isDesktop,
    isIOS,
    isAndroid,
    screenWidth,
    screenHeight,
    userAgent,
    platform,
    isTelegramWebApp,
    hasTouch,
    isLargeScreen
  };

  console.log('üîç [DETECT] Final device info:', result);
  return result;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–±–∏–ª—å–Ω—ã—Ö
const enterBrowserFullscreen = () => {
  const doc = document.documentElement;
  const body = document.body;

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API
  if (doc.requestFullscreen) {
    return doc.requestFullscreen();
  }

  // WebKit –ø—Ä–µ—Ñ–∏–∫—Å (iOS Safari, —Å—Ç–∞—Ä—ã–µ Chrome)
  if (doc.webkitRequestFullscreen) {
    return doc.webkitRequestFullscreen();
  }

  // Firefox –ø—Ä–µ—Ñ–∏–∫—Å
  if (doc.mozRequestFullScreen) {
    return doc.mozRequestFullScreen();
  }

  // IE/Edge –ø—Ä–µ—Ñ–∏–∫—Å
  if (doc.msRequestFullscreen) {
    return doc.msRequestFullscreen();
  }

  // –ï—Å–ª–∏ fullscreen API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏–º–∏—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ CSS
  console.warn('Fullscreen API not supported, using CSS simulation');
  return simulateMobileFullscreen();
};

// –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ CSS (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
const simulateMobileFullscreen = () => {
  return new Promise((resolve, reject) => {
    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ fullscreen
      const html = document.documentElement;
      const body = document.body;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
      const originalHtmlStyles = {
        position: html.style.position,
        top: html.style.top,
        left: html.style.left,
        right: html.style.right,
        bottom: html.style.bottom,
        width: html.style.width,
        height: html.style.height
      };

      const originalBodyStyles = {
        position: body.style.position,
        top: body.style.top,
        left: body.style.left,
        right: body.style.right,
        bottom: body.style.bottom,
        width: body.style.width,
        height: body.style.height,
        margin: body.style.margin,
        padding: body.style.padding
      };

      // –ü—Ä–∏–º–µ–Ω—è–µ–º fullscreen —Å—Ç–∏–ª–∏
      Object.assign(html.style, {
        position: 'fixed',
        top: '0',
        left: '0',
        right: '0',
        bottom: '0',
        width: '100vw',
        height: '100vh'
      });

      Object.assign(body.style, {
        position: 'fixed',
        top: '0',
        left: '0',
        right: '0',
        bottom: '0',
        width: '100vw',
        height: '100vh',
        margin: '0',
        padding: '0'
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      document.documentElement.classList.add('simulated-fullscreen');
      document.body.classList.add('simulated-fullscreen');

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ fullscreen
      const exitSimulatedFullscreen = () => {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        Object.assign(html.style, originalHtmlStyles);
        Object.assign(body.style, originalBodyStyles);

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
        document.documentElement.classList.remove('simulated-fullscreen');
        document.body.classList.remove('simulated-fullscreen');
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      window.exitSimulatedFullscreen = exitSimulatedFullscreen;

      console.log('‚úÖ Simulated fullscreen enabled via CSS');
      resolve();

    } catch (error) {
      console.error('‚ùå Simulated fullscreen failed:', error);
      reject(error);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
const exitBrowserFullscreen = () => {
  if (document.exitFullscreen) {
    return document.exitFullscreen();
  } else if (document.webkitExitFullscreen) {
    return document.webkitExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    return document.mozCancelFullScreen();
  } else if (document.msExitFullscreen) {
    return document.msExitFullscreen();
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp API –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const initTelegramMobile = () => {
  if (!window.Telegram?.WebApp) return false;
  const tg = window.Telegram.WebApp;

  try {
    tg.ready();

    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º tg.expand() - –æ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å requestFullscreen()
    // tg.expand(); // –£–ë–†–ê–ù–û!
    console.log('Mobile Telegram: using requestFullscreen only');

  } catch (error) {
    console.error('Error initializing Telegram mobile:', error);
  }

  return true;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp API –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
const initTelegramDesktop = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram API
  if (!window.Telegram?.WebApp) {
    console.log('Desktop mode: Telegram WebApp not available, using standalone mode');
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Telegram —Å—Ä–µ–¥–∞, –∞ –Ω–µ –æ—à–∏–±–∫–∞ —Å window.TelegramGameProxy
  if (!window.Telegram.WebApp.ready || typeof window.Telegram.WebApp.ready !== 'function') {
    console.log('Desktop mode: Telegram WebApp not properly initialized, using standalone mode');
    return false;
  }

  const tg = window.Telegram.WebApp;

  try {
    tg.ready();

    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –ù–ï —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    // tg.expand() –ù–ï –í–´–ó–´–í–ê–ï–ú - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('Desktop Telegram: keeping regular window size');

    return true;

  } catch (error) {
    console.error('Error initializing Telegram desktop:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
    return false;
  }
};

// –û–±—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (fallback)
const initTelegram = () => {
  if (!window.Telegram?.WebApp) return false;
  const tg = window.Telegram.WebApp;
  try { tg.ready(); } catch (_) {}
  return true;
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–≤–∞–π–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
const preventSwipeClose = (e) => {
  if (e.touches && e.touches[0]) {
    const touch = e.touches[0];
    if (touch.clientY < 100) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–≤–∞–π–ø–æ–≤
const reapplySwipeProtection = () => {
  // –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  if (!window.isMobileDevice) {
    return;
  }

  // –ü–†–û–í–ï–†–ö–ê: –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
  const now = Date.now();
  if (window.lastSwipeProtectionTime && now - window.lastSwipeProtectionTime < 2000) {
    return;
  }
  window.lastSwipeProtectionTime = now;

  const tg = window.Telegram?.WebApp;
  if (tg?.disableVerticalSwipes) {
    tg.disableVerticalSwipes();
    console.log('üîí Swipe protection reapplied');
  }
  if (tg?.enableClosingConfirmation) {
    tg.enableClosingConfirmation();
    console.log('üîí Closing confirmation reapplied');
  }
};

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const setupMobileFullscreen = (tg) => {
  if (!tg) return;

  console.log('üöÄ Setting up mobile fullscreen mode');
  console.log('üì± Telegram WebApp available:', !!tg);
  console.log('üì± Telegram WebApp requestFullscreen:', !!tg.requestFullscreen);

  // –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
  if (window.mobileFullscreenInitialized) {
    console.log('üì± Mobile fullscreen already initialized, skipping');
    return;
  }
  window.mobileFullscreenInitialized = true;

  // –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–î–•–û–î –î–õ–Ø TELEGRAM MINI APP

  // –ü–æ–ø—ã—Ç–∫–∞ 1: Telegram WebApp fullscreen API
  const tryTelegramFullscreen = () => {
    console.log('üîÑ Trying Telegram WebApp fullscreen...');
    return new Promise((resolve, reject) => {
      try {
        if (tg.requestFullscreen) {
          tg.requestFullscreen();
          console.log('‚úÖ Telegram requestFullscreen() called');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            console.log('üìä Checking Telegram fullscreen result...');
            resolve();
          }, 500);
        } else {
          console.log('‚ùå Telegram requestFullscreen not available');
          reject(new Error('Telegram requestFullscreen not available'));
        }
      } catch (error) {
        console.log('‚ùå Telegram fullscreen failed:', error);
        reject(error);
      }
    });
  };

  // –ü–æ–ø—ã—Ç–∫–∞ 2: –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π fullscreen API
  const tryBrowserFullscreen = () => {
    console.log('üîÑ Trying browser fullscreen API...');
    return enterBrowserFullscreen().then(() => {
      console.log('‚úÖ Browser fullscreen API succeeded');
    }).catch(err => {
      console.log('‚ùå Browser fullscreen API failed, trying simulation:', err);
      // –ü–æ–ø—ã—Ç–∫–∞ 3: CSS –∏–º–∏—Ç–∞—Ü–∏—è fullscreen
      return simulateMobileFullscreen();
    });
  };

  // –ü–æ–ø—ã—Ç–∫–∞ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
  const forceFullscreenActivation = () => {
    console.log('üîÑ Force activating fullscreen via events...');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    const events = ['touchstart', 'touchend', 'click'];

    events.forEach(eventType => {
      const event = new Event(eventType, { bubbles: true });
      document.dispatchEvent(event);
    });

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ—Å–ª–µ –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    setTimeout(() => {
      tryTelegramFullscreen()
        .catch(() => tryBrowserFullscreen())
        .catch(err => {
          console.log('‚ùå All fullscreen attempts failed:', err);
        });
    }, 200);
  };

  // –ì–õ–ê–í–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û–ü–´–¢–û–ö

  // –ù–∞—á–∏–Ω–∞–µ–º —Å Telegram API
  tryTelegramFullscreen().catch(() => {
    console.log('üîÑ Telegram fullscreen failed, trying browser API...');
    // –ï—Å–ª–∏ Telegram –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π API
    tryBrowserFullscreen().catch(() => {
      console.log('üîÑ Browser fullscreen failed, trying force activation...');
      // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
      forceFullscreenActivation();
    });
  });

  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–í–¢–û–†–ù–´–ï –ü–û–ü–´–¢–ö–ò
  setTimeout(() => {
    console.log('üîÑ Additional fullscreen attempt after 1s...');
    tryTelegramFullscreen().catch(() => tryBrowserFullscreen());
  }, 1000);

  setTimeout(() => {
    console.log('üîÑ Final fullscreen attempt after 3s...');
    tryTelegramFullscreen().catch(() => tryBrowserFullscreen());
  }, 3000);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è status bar
  document.body.style.backgroundColor = '#121a12';

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
  const viewport = tg.viewportHeight;
  if (viewport) {
    document.documentElement.style.height = viewport + 'px';
    document.body.style.height = viewport + 'px';
    document.body.style.minHeight = viewport + 'px';
  }

  // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–æ–ª–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  document.body.style.overscrollBehavior = 'none';
  document.documentElement.style.overscrollBehavior = 'none';

  // –ó–ê–©–ò–¢–ê –û–¢ –°–í–ê–ô–ü–û–í - –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´
  if (typeof tg.disableVerticalSwipes === 'function') {
    tg.disableVerticalSwipes();
    console.log('‚úÖ Vertical swipes disabled');
  }

  if (typeof tg.enableClosingConfirmation === 'function') {
    tg.enableClosingConfirmation();
    console.log('‚úÖ Closing confirmation enabled');
  }

  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø CSS –ó–ê–©–ò–¢–ê
  document.body.style.touchAction = 'none';
  document.documentElement.style.touchAction = 'none';

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ touch —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
  document.addEventListener('touchstart', preventSwipeClose, { passive: false });
  document.addEventListener('touchmove', preventSwipeClose, { passive: false });
  document.addEventListener('touchend', preventSwipeClose, { passive: false });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¢–û–õ–¨–ö–û –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• (–Ω–∞ —Å–ª—É—á–∞–π —Å–±—Ä–æ—Å–∞ Telegram)
  if (window.isMobileDevice) {
    setInterval(reapplySwipeProtection, 10000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 10 —Å–µ–∫—É–Ω–¥
    console.log('üì± Mobile: periodic swipe protection enabled (10s interval)');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ viewport
  tg.onEvent('viewportChanged', () => {
    const newViewport = tg.viewportHeight;
    if (newViewport) {
      document.documentElement.style.height = newViewport + 'px';
      document.body.style.height = newViewport + 'px';
      document.body.style.minHeight = newViewport + 'px';
    }
    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
    setTimeout(() => {
      reapplySwipeProtection();
    }, 100);
  });

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –∂–µ—Å—Ç—ã
  document.addEventListener('gesturestart', (e) => {
    e.preventDefault();
  });

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø –∑—É–º
  document.addEventListener('dblclick', (e) => {
    e.preventDefault();
  });

  console.log('Mobile fullscreen setup completed');
};

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
const setupDesktopMode = (tg) => {
  console.log('üíª Setting up desktop mode');

  // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Telegram API (fallback mode)
  document.body.style.backgroundColor = '#121a12';
  document.body.style.overscrollBehavior = 'none';
  document.documentElement.style.overscrollBehavior = 'none';

  // –ê–ì–†–ï–°–°–ò–í–ù–û–ï –°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï –î–ï–°–ö–¢–û–ü–ê
  if (tg) {
    try {
      tg.ready();
      console.log('üíª Desktop Telegram: basic setup completed');

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–í–û–†–ê–ß–ò–í–ê–ï–ú –î–ï–°–ö–¢–û–ü
      setTimeout(() => {
        console.log('üíª Desktop: attempting to collapse window');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ viewport
        console.log('üíª Desktop viewport state:', {
          height: tg.viewportHeight,
          isExpanded: tg.isExpanded,
          isStateStable: tg.isStateStable
        });

        // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –ø—ã—Ç–∞–µ–º—Å—è —Å–≤–µ—Ä–Ω—É—Ç—å
        if (tg.viewportHeight && tg.viewportHeight > 600) {
          console.log('üíª Desktop: detected expanded state, attempting to minimize');

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É viewport
          document.documentElement.style.height = '600px';
          document.body.style.height = '600px';
          document.body.style.maxHeight = '600px';

          // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
          const style = document.createElement('style');
          style.textContent = `
            html, body {
              max-height: 600px !important;
              height: 600px !important;
              overflow: hidden !important;
            }
            #app {
              max-height: 600px !important;
              height: 600px !important;
            }
          `;
          document.head.appendChild(style);

          console.log('üíª Desktop: collapse styles applied');
        }
      }, 1000);

    } catch (error) {
      console.warn('üíª Desktop Telegram setup failed:', error);
    }
  } else {
    console.log('üíª Desktop mode: standalone (no Telegram API)');
  }

  // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º fullscreen —Ñ—É–Ω–∫—Ü–∏–∏
  // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º —Å–≤–∞–π–ø—ã (–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
};

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
window.addEventListener('resize', function() {
  if (!window.isMobileDevice && window.innerHeight > 650) {
    console.log('üö® [RESIZE] Detected height increase on desktop, blocking...');
    document.documentElement.style.height = '600px';
    document.documentElement.style.maxHeight = '600px';
    document.body.style.height = '600px';
    document.body.style.maxHeight = '600px';
  }
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
console.log('üéØ [INIT] Starting Telegram WebApp initialization...');
const deviceInfo = detectDevice();
console.log('üìä [INIT] Device detection completed:', deviceInfo);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let telegramInitialized = false;

console.log('üéØ [INIT] Starting device-specific initialization...');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
window.isMobileDevice = deviceInfo.isMobile;

if (deviceInfo.isMobile) {
  console.log('üì± [INIT] Mobile device detected - initializing mobile mode');
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  if (initTelegramMobile()) {
    telegramInitialized = true;
    const tg = window.Telegram.WebApp;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    setupMobileFullscreen(tg);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    setTimeout(() => {
      if (tg.MainButton) {
        tg.MainButton.hide();
      }
      console.log('Mobile viewport height:', tg.viewportHeight);
    }, 100);
  } else {
    // Fallback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±–µ–∑ Telegram API
    console.log('üì± [INIT] Mobile fallback: Telegram not available, using browser fullscreen');
    telegramInitialized = true;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π fullscreen —Å—Ä–∞–∑—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±–µ–∑ Telegram
    enterBrowserFullscreen().then(() => {
      console.log('‚úÖ Mobile fallback fullscreen enabled');
    }).catch(err => {
      console.log('Mobile fallback fullscreen failed:', err);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    document.body.style.backgroundColor = '#121a12';
    document.body.style.overscrollBehavior = 'none';
    document.documentElement.style.overscrollBehavior = 'none';
  }
} else if (deviceInfo.isDesktop) {
  console.log('üíª [INIT] Desktop device detected - initializing desktop mode');
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
  if (initTelegramDesktop()) {
    telegramInitialized = true;
    const tg = window.Telegram.WebApp;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    setupDesktopMode(tg);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    setTimeout(() => {
      if (tg.MainButton) {
        tg.MainButton.hide();
      }
      console.log('Desktop mode: regular window');
    }, 100);
  } else {
    // Fallback –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –±–µ–∑ Telegram API
    console.log('Desktop fallback: Telegram not available, using standalone mode');
    telegramInitialized = true;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    setupDesktopMode(null);

    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º fullscreen
    console.log('Desktop standalone: regular browser window');
  }
}

// Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
if (!telegramInitialized) {
  if (initTelegram()) {
    telegramInitialized = true;
    const tg = window.Telegram.WebApp;

    // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    console.log('Unknown device type, using mobile fullscreen as fallback');
    setupMobileFullscreen(tg);

    setTimeout(() => {
      if (tg.MainButton) {
        tg.MainButton.hide();
      }
    }, 100);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ Telegram SDK –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
if (!telegramInitialized) {
  console.warn("Telegram WebApp not available yet, waiting for SDK...");
  let attempts = 0;
  const maxAttempts = 20; // ~2s

  const timer = setInterval(() => {
    attempts++;

    if (telegramInitialized) {
      clearInterval(timer);
      return;
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    const currentDeviceInfo = detectDevice();

    if (currentDeviceInfo.isMobile) {
      if (initTelegramMobile()) {
        clearInterval(timer);
        const tg = window.Telegram.WebApp;
        setupMobileFullscreen(tg);
        telegramInitialized = true;
        return;
      }
    } else if (currentDeviceInfo.isDesktop) {
      if (initTelegramDesktop()) {
        clearInterval(timer);
        const tg = window.Telegram.WebApp;
        setupDesktopMode(tg);
        telegramInitialized = true;
        return;
      }
    }

    // Fallback
    if (initTelegram()) {
      clearInterval(timer);
      const tg = window.Telegram.WebApp;
      setupMobileFullscreen(tg); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      telegramInitialized = true;
      return;
    }

    if (attempts >= maxAttempts) {
      clearInterval(timer);
      console.warn("Telegram WebApp script not loaded. Running in fallback mode.");

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
      document.body.style.overscrollBehavior = 'none';
      document.documentElement.style.overscrollBehavior = 'none';
      document.body.style.minHeight = '100vh';
      document.documentElement.style.minHeight = '100vh';

      // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ö–∞–ø—Ç–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
      window.triggerHaptic = () => {};
    }
  }, 100);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini Apps
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–∞–ø—Ç–∏–∫–æ–≤
window.triggerHaptic = (type = 'light') => {
  const tg = window.Telegram?.WebApp;
  if (tg?.HapticFeedback) {
    tg.HapticFeedback.impactOccurred(type);
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ fullscreen
window.enterBrowserFullscreen = enterBrowserFullscreen;
window.exitBrowserFullscreen = exitBrowserFullscreen;
