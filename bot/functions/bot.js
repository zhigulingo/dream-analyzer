// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω replyWithMarkdown, –¥–æ–±–∞–≤–∏–ª –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
let bot;
let supabaseAdmin;
let geminiModel;
let initializationError = null;

try {
    console.log("[Bot Global Init] Initializing clients and bot...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        throw new Error("FATAL: Missing environment variables!");
    }
    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Basic bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (–ò–°–ü–†–ê–í–õ–ï–ù–û replyWithMarkdown)
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received.");
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot Handler /start] No user ID."); return; }
        console.log(`[Bot Handler /start] User ${userId}`);
        try {
            //await getOrCreateUser(supabaseAdmin, userId);
            console.log(`[Bot Handler /start] Ensured user ${userId} exists.`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã!
            // –ù–æ –ø—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É, –æ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–µ–µ.
            const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
            const buttonUrl = `${TMA_URL}?action=claim_reward`;

            // <<<--- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ctx.reply —Å parse_mode: 'HTML' ---
            await ctx.reply(welcomeMessage, {
                parse_mode: 'HTML', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ MarkdownV2
                reply_markup: {
                    inline_keyboard: [[{
                        text: "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        web_app: { url: buttonUrl }
                    }]]
                }
            }).catch(logReplyError);
            // <<<--- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

            console.log(`[Bot Handler /start] Welcome message sent to ${userId}.`);
        } catch (e) {
            console.error("[Bot Handler /start] Error:", e); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.").catch(logReplyError);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler message:text] Text received.");
        const dreamText = ctx.message.text;
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot Handler message:text] No user ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler message:text] Ignoring command.`); return; }
        console.log(`[Bot Handler message:text] Processing dream for ${userId}`);
        await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
    bot.on('pre_checkout_query', async (ctx) => { /* ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç RPC)
    bot.on('message:successful_payment', async (ctx) => { /* ... */ });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    bot.catch((err) => {
        // <<<--- –î–û–ë–ê–í–õ–ï–ù –õ–û–ì –í bot.catch ---
        const ctx = err.ctx;
        const e = err.error;
        console.error(`[Bot Catch Handler] Error caught for update ${ctx?.update?.update_id}. Error type: ${e?.constructor?.name}`);
        if (e instanceof GrammyError) { console.error("[Bot Catch Handler] GrammyError:", e.description, e.payload); }
        else if (e instanceof HttpError) { console.error("[Bot Catch Handler] HttpError:", e); }
        else if (e instanceof Error) { console.error("[Bot Catch Handler] Error:", e.stack || e.message); } // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫
        else { console.error("[Bot Catch Handler] Unknown error:", e); }
         // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π
         // if (ctx && !(e instanceof GrammyError && e.description.includes('message to send'))) {
         //    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(logReplyError);
         // }
    });

    console.log("[Bot Global Init] Handlers configured successfully.");

} catch (error) {
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error;
    bot = null;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---
// getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError
async function getOrCreateUser(supabase, userId) { /* ... –≤–∞—à –∫–æ–¥ —Å tokens: 0 ... */ }
async function getGeminiAnalysis(geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
async function analyzeDream(ctx, supabase, geminiModel, dreamText) { /* ... –≤–∞—à –∫–æ–¥ ... */ }
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function —Å webhookCallback ---
exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");

    if (initializationError || !bot) {
        console.error("[Netlify Handler] Bot initialization failed previously.", initializationError);
        return { statusCode: 500, body: "Internal Server Error: Bot failed to initialize." };
    }

    try {
        const callback = webhookCallback(bot, 'aws-lambda');
        console.log("[Netlify Handler] Calling webhookCallback...");
        const response = await callback(event); // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ Netlify
        console.log("[Netlify Handler] webhookCallback finished. Response status:", response.statusCode);
        return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç grammY
    } catch (error) {
        // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã bot.catch –ò–õ–ò –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ —Å–∞–º–æ–º webhookCallback
        console.error("[Netlify Handler] CRITICAL error during webhookCallback:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π 500, —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –æ—à–∏–±–∫–æ–π
        return { statusCode: 500, body: "Internal Server Error" };
    }
};
