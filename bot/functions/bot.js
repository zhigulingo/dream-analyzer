// bot/functions/bot.js

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

async function getOrCreateUser(supabase, userId) {
    // ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabase
            .from('users').select('id').eq('tg_id', userId).single();
        if (selectError && selectError.code !== 'PGRST116') throw selectError;
        if (existingUser) return existingUser.id;
        else {
            const { data: newUser, error: insertError } = await supabase
                .from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 1 }).select('id').single();
            if (insertError) throw insertError;
            if (!newUser) throw new Error("User creation returned no data.");
            console.log(`[Bot] Created new user: tg_id=${userId}, id=${newUser.id}`);
            return newUser.id;
        }
    } catch (error) { console.error(`[Bot] Error in getOrCreateUser for ${userId}:`, error.message); return null; }
}

async function getGeminiAnalysis(geminiModel, dreamText) {
    // ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if (!geminiModel) { console.error("[Bot] Gemini model is null or undefined in getGeminiAnalysis."); return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."; }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;
    try {
        console.log("[Bot] Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤...`; // –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response;
        if (response.promptFeedback?.blockReason) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ ... */ }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ ... */ }
        console.log("[Bot] Gemini analysis received successfully.");
        return analysisText;
    } catch (error) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ ... */ }
}

async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    // <<<--- –£–ë–†–ê–õ–ò –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ premium, —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º ---
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º ID, –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–µ–ª–∞–µ—Ç RPC
        userDbId = await getOrCreateUser(supabase, userId);
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.").catch(logReplyError); return; }

        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ RPC
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabaseAdmin // –ò—Å–ø–æ–ª—å–∑—É–µ–º Admin –∫–ª–∏–µ–Ω—Ç –¥–ª—è RPC
            .rpc('decrement_token_if_available', { user_tg_id: userId }); // –ü–µ—Ä–µ–¥–∞–µ–º tg_id

        if (rpcError) {
             console.error(`[Bot:analyzeDream] RPC error decrement_token for tg_id ${userId}:`, rpcError);
             await ctx.reply("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤.").catch(logReplyError);
             if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); } // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
             return;
        }
        if (!tokenDecremented) {
            console.log(`[Bot:analyzeDream] Not enough tokens for user tg_id ${userId}.`);
             if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); } // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await ctx.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", { /* ... reply_markup ... */ }).catch(logReplyError);
            return;
        }

        // –¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        console.log(`[Bot:analyzeDream] Token decremented for tg_id ${userId}.`);
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); } // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ edit —É–ø–∞–ª

        // –í—ã–∑—ã–≤–∞–µ–º Gemini
        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText);

        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("[Bot] Could not delete status message:", e)); processingMessage = null; }

        const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));
        if (isErrorResult) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Gemini ... */ await ctx.reply(analysisResult || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError); console.warn(`[Bot] Analysis failed for ${userId}, token consumed.`); return; }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        const { error: insertError } = await supabaseAdmin // –ò—Å–ø–æ–ª—å–∑—É–µ–º Admin –∫–ª–∏–µ–Ω—Ç
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });
        if (insertError) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ... */ await ctx.reply("–°–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + analysisResult).catch(logReplyError); await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –õ–ö.").catch(logReplyError); return; }

        console.log(`[Bot] Analysis for ${userId} successful.`);
        // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏
        await ctx.reply(`–í–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞:\n\n${analysisResult}\n\n–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω. –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`, { /* ... reply_markup ... */ }).catch(logReplyError);

    } catch (error) {
        console.error(`[Bot] Critical error in analyzeDream for ${userId}:`, error);
         if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); }
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–Ω–∞.").catch(logReplyError);
    }
}

function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("[Bot] Handler invoked.");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY) { /* ... –ø—Ä–æ–≤–µ—Ä–∫–∞ ... */ }
    if (!event.body) { /* ... –ø—Ä–æ–≤–µ—Ä–∫–∞ ... */ }
    let update; try { update = JSON.parse(event.body); } catch (e) { /* ... –ø—Ä–æ–≤–µ—Ä–∫–∞ ... */ }

    let supabaseAdmin; // <<<--- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ —ç—Ç–æ Admin –∫–ª–∏–µ–Ω—Ç
    let geminiModel;
    let bot;
    try {
        console.log("[Bot] Initializing clients inside handler...");
        supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Key
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const modelName = "gemini-2.0-flash";
        geminiModel = genAI.getGenerativeModel({ model: modelName });
        console.log(`[Bot] Using Gemini model: ${modelName}`);
        bot = new Bot(BOT_TOKEN);
        console.log("[Bot] Bot instance created. Calling bot.init()...");
        await bot.init();
        console.log("[Bot] bot.init() successful.");
    } catch (initError) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ... */ }

    // --- 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot] Setting up bot handlers...");
    bot.command("start", async (ctx) => { /* ... */ await getOrCreateUser(supabaseAdmin, ctx.from.id); /* ... */ }); // –ü–µ—Ä–µ–¥–∞–µ–º admin –∫–ª–∏–µ–Ω—Ç
    bot.on("message:text", async (ctx) => { /* ... */ await analyzeDream(ctx, supabaseAdmin, geminiModel, ctx.message.text); /* ... */ }); // –ü–µ—Ä–µ–¥–∞–µ–º admin –∫–ª–∏–µ–Ω—Ç

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–ª–∞—Ç–µ–∂–µ–π ---
    bot.on('pre_checkout_query', async (ctx) => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ });

    bot.on('message:successful_payment', async (ctx) => {
        const payment = ctx.message.successful_payment;
        const userId = ctx.from.id;
        console.log(`[Bot] Received SuccessfulPayment from ${userId}. Amount: ${payment.total_amount} ${payment.currency}. Payload: ${payment.invoice_payload}`);
        const payload = payment.invoice_payload;
        const parts = payload.split('_');

        if (parts.length < 4 || parts[0] !== 'sub') { console.error(`[Bot] Invalid payload: ${payload}`); return; }
        const plan = parts[1];
        const durationMonths = parseInt(parts[2].replace('mo', ''), 10);
        const payloadUserId = parseInt(parts[3], 10);
        if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) { console.error(`[Bot] Payload error or user mismatch: payload=${payload}, userId=${userId}`); return; }

        console.log(`[Bot] Processing payment for user ${userId}: Plan=${plan}, Duration=${durationMonths} months.`);

        try {
            if (!supabaseAdmin) { throw new Error("Supabase client unavailable"); }

            // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã
            const { data: user, error: findError } = await supabaseAdmin
                .from('users')
                .select('id, tokens, subscription_end') // <<<--- –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                .eq('tg_id', userId)
                .single();

            if (findError || !user) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ ... */ await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.").catch(logReplyError); return; }

            // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            const now = new Date();
            let currentSubEnd = user.subscription_end ? new Date(user.subscription_end) : now;
            if (currentSubEnd < now) { currentSubEnd = now; }
            const newSubEndDate = new Date(currentSubEnd.setMonth(currentSubEnd.getMonth() + durationMonths));

            // <<<--- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í ---
            let tokensToAdd = 0;
            if (plan === 'basic') {
                tokensToAdd = 15;
            } else if (plan === 'premium') {
                tokensToAdd = 30;
            }
            const currentTokens = user.tokens || 0; // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∏–ª–∏ 0, –µ—Å–ª–∏ null
            const newTokens = currentTokens + tokensToAdd;
            console.log(`[Bot] Updating tokens for user ${userId}: Current=${currentTokens}, Add=${tokensToAdd}, New=${newTokens}`);
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             const { error: updateError } = await supabaseAdmin
                 .from('users')
                 .update({
                     subscription_type: plan,
                     subscription_end: newSubEndDate.toISOString(),
                     tokens: newTokens // <<<--- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
                 })
                 .eq('id', user.id);

            if (updateError) { console.error(`[Bot] Failed DB update for user ${userId}:`, updateError); throw new Error("Database update failed"); }

            console.log(`[Bot] User ${userId} updated: Plan=${plan}, Ends=${newSubEndDate.toISOString()}, Tokens=${newTokens}`);
            await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${newSubEndDate.toLocaleDateString()}. ${tokensToAdd > 0 ? `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${tokensToAdd} —Ç–æ–∫–µ–Ω–æ–≤.` : ''}`).catch(logReplyError);

        } catch (error) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ ... */ await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.").catch(logReplyError); }
    });
    // --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ü–õ–ê–¢–ï–ñ–ï–ô ---

    bot.catch((err) => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ });
    console.log("[Bot] Bot handlers configured.");

    // --- 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    try {
        console.log("[Bot] Passing update to bot.handleUpdate...");
        await bot.handleUpdate(update);
        console.log("[Bot] bot.handleUpdate finished.");
        return { statusCode: 200, body: "" };
    } catch (error) { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ handleUpdate ... */ }
};

console.log("[Bot] Netlify function bot.js (with token accrual logic) loaded.");
