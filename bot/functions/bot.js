// bot/functions/bot.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @grammyjs/netlify-adapter)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { webhookCallback } = require("@grammyjs/netlify-adapter"); // <<<--- –ò–ú–ü–û–†–¢ –ê–î–ê–ü–¢–ï–†–ê

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /start

// --- –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –§–£–ù–ö–¶–ò–ò ---
if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
    console.error("[Bot Global Init] FATAL: Missing one or more environment variables!");
    // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Netlify –ø–æ–∫–∞–∑–∞–ª —Å–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ/–∑–∞–ø—É—Å–∫–µ
    throw new Error("Missing critical environment variables. Function cannot start.");
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í (–í–Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) ---
console.log("[Bot Global Init] Initializing clients and bot...");
const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
// –ú–æ–¥–µ–ª—å Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∂–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Ç.–∫. –æ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
let geminiModel; // = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
const bot = new Bot(BOT_TOKEN);
console.log("[Bot Global Init] Basic bot instance created.");

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ (getOrCreateUser, getGeminiAnalysis, analyzeDream, logReplyError) ---
// –û–°–¢–ê–í–¨–¢–ï –ó–î–ï–°–¨ –í–ê–®–ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò getOrCreateUser, getGeminiAnalysis,
// analyzeDream, logReplyError –ò–ó –ü–†–ï–î–´–î–£–©–ò–• –í–ï–†–°–ò–ô –ö–û–î–ê
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ getOrCreateUser —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
async function getOrCreateUser(supabase, userId) {
    // ... (–í–∞—à–∞ –≤–µ—Ä—Å–∏—è getOrCreateUser, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ...
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
        try {
            let { data: existingUser, error: selectError } = await supabase
                .from('users').select('id').eq('tg_id', userId).single();
            if (selectError && selectError.code !== 'PGRST116') throw selectError;
            if (existingUser) return existingUser.id;
            else {
                 console.log(`[Bot:getOrCreateUser] User ${userId} not found. Creating new user...`);
                const { data: newUser, error: insertError } = await supabase
                    .from('users').insert({ tg_id: userId }).select('id').single(); // –¢–æ–ª—å–∫–æ tg_id
                if (insertError) throw insertError;
                if (!newUser) throw new Error("User creation returned no data.");
                console.log(`[Bot:getOrCreateUser] Created new user: tg_id=${userId}, id=${newUser.id}`);
                return newUser.id;
            }
        } catch (error) {
            console.error(`[Bot:getOrCreateUser] CRITICAL error for ${userId}:`, error.message);
            throw new Error(`Failed to get or create user: ${error.message}`);
        }
}
async function getGeminiAnalysis(dreamText) {
     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
     if (!geminiModel) {
         try {
             console.log("[getGeminiAnalysis] Initializing Gemini model...");
             geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å
             console.log("[getGeminiAnalysis] Gemini model initialized.");
         } catch (initErr) {
              console.error("[getGeminiAnalysis] Failed to initialize Gemini model:", initErr);
              return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞.";
         }
     }
    // ... (–í–∞—à–∞ –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ getGeminiAnalysis) ...
    const MAX_DREAM_LENGTH = 4000; if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω."; if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`; try { console.log("[Bot] Requesting Gemini analysis..."); const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`; const result = await geminiModel.generateContent(prompt); const response = await result.response; if (response.promptFeedback?.blockReason) { console.warn(`[Bot] Gemini blocked: ${response.promptFeedback.blockReason}`); return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}).`; } const analysisText = response.text(); if (!analysisText || analysisText.trim().length === 0) { console.error("[Bot] Gemini returned empty response."); return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)."; } console.log("[Bot] Gemini analysis received successfully."); return analysisText; } catch (error) { console.error("[Bot] Error explicitly caught in getGeminiAnalysis:", error); if (error.message?.includes("API key not valid")) { return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API."; } else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) { return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."; } return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞."; }
}
async function analyzeDream(ctx, supabase, dreamText) {
    // ... (–í–∞—à–∞ –ª–æ–≥–∏–∫–∞ analyzeDream —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RPC –∏ Gemini) ...
     const userId = ctx.from?.id; if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; } let userDbId; let processingMessage; try { userDbId = await getOrCreateUser(supabase, userId); if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.").catch(logReplyError); return; } processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError); const { data: tokenDecremented, error: rpcError } = await supabase .rpc('decrement_token_if_available', { user_tg_id: userId }); if (rpcError) { console.error(`[Bot:analyzeDream] RPC error for tg_id ${userId}:`, rpcError); throw new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.");} if (!tokenDecremented) { console.log(`[Bot:analyzeDream] Not enough tokens for ${userId}.`); if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); await ctx.reply("–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.", { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError); return; } console.log(`[Bot:analyzeDream] Token decremented for ${userId}.`); if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); } else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); } const analysisResult = await getGeminiAnalysis(dreamText); if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); processingMessage = null; } const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix)); if (isErrorResult) { await ctx.reply(analysisResult || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError); console.warn(`[Bot] Analysis failed for ${userId}, token consumed.`); return; } const { error: insertError } = await supabase .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult }); if (insertError) { console.error(`[Bot] Error saving analysis for ${userDbId}:`, insertError); await ctx.reply("–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n" + analysisResult).catch(logReplyError); return; } console.log(`[Bot] Analysis successful for ${userId}.`); await ctx.reply(`–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n\n${analysisResult}\n\n–¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω. –ò—Å—Ç–æ—Ä–∏—è –≤ –õ–ö.`, { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError); } catch (error) { console.error(`[Bot] Critical error in analyzeDream for ${userId}:`, error.message); if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); } await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError); }
}
function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }
// --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ---

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
console.log("[Bot Global Init] Setting up handlers...");

bot.command("start", async (ctx) => {
    console.log("[Bot Handler /start] Command received."); // –ò–∑–º–µ–Ω–∏–ª–∏ –ª–æ–≥
    const userId = ctx.from?.id;
    if (!userId) { console.warn("[Bot Handler /start] No user ID."); return; }
    console.log(`[Bot Handler /start] User ${userId}`);
    try {
        await getOrCreateUser(supabaseAdmin, userId); // –ü—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
        console.log(`[Bot Handler /start] Ensured user ${userId} exists.`);

        const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Ç–∞–π–Ω—ã–µ —Å–º—ã—Å–ª—ã —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ü–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω!";
        const buttonUrl = `${TMA_URL}?action=claim_reward`; // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è TMA

        await ctx.reply(welcomeMessage, {
            reply_markup: {
                inline_keyboard: [[{
                    text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω",
                    web_app: { url: buttonUrl }
                }]]
            }
        }).catch(logReplyError);
         console.log(`[Bot Handler /start] Welcome message sent to ${userId}.`); // –ò–∑–º–µ–Ω–∏–ª–∏ –ª–æ–≥

    } catch (e) {
        console.error("[Bot Handler /start] Error:", e);
        // –°—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try { await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError); } catch {}
    }
});

bot.on("message:text", async (ctx) => {
     console.log("[Bot Handler text] Received text message.");
     const dreamText = ctx.message.text; const userId = ctx.from?.id; if (!userId) return;
     if (dreamText.startsWith('/')) { console.log(`[Bot Handler text] Ignoring command: ${dreamText}`); return; } // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
     console.log(`[Bot Handler text] Processing dream for ${userId}`);
     await analyzeDream(ctx, supabaseAdmin, dreamText); // –£–±—Ä–∞–ª–∏ geminiModel, –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π pre_checkout_query –∏ message:successful_payment
bot.on('pre_checkout_query', async (ctx) => {
    // ... (–í–∞—à–∞ –ª–æ–≥–∏–∫–∞ pre_checkout_query) ...
    console.log("[Bot:Handler pre_checkout_query] Received:", JSON.stringify(ctx.preCheckoutQuery)); try { await ctx.answerPreCheckoutQuery(true); console.log("[Bot:Handler pre_checkout_query] Answered TRUE."); } catch (error) { console.error("[Bot:Handler pre_checkout_query] Failed to answer:", error); try { await ctx.answerPreCheckoutQuery(false, "Error"); } catch (e) {} }
});
bot.on('message:successful_payment', async (ctx) => {
   // ... (–í–∞—à–∞ –ª–æ–≥–∏–∫–∞ successful_payment) ...
    console.log("[Bot:Handler successful_payment] Received:", JSON.stringify(ctx.message.successful_payment)); const payment = ctx.message.successful_payment; const userId = ctx.from.id; const payload = payment.invoice_payload; const parts = payload.split('_'); if (parts.length < 4 || parts[0] !== 'sub') { console.error(`[Bot] Invalid payload: ${payload}`); return; } const plan = parts[1]; const durationMonths = parseInt(parts[2].replace('mo', ''), 10); const payloadUserId = parseInt(parts[3], 10); if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) { console.error(`[Bot] Payload error/mismatch: ${payload}, sender=${userId}`); return; } console.log(`[Bot] Processing payment for ${userId}: Plan=${plan}, Duration=${durationMonths}m.`); try { if (!supabaseAdmin) { throw new Error("Supabase unavailable"); } const { data: user, error: findError } = await supabaseAdmin.from('users').select('id, tokens, subscription_end').eq('tg_id', userId).single(); if (findError || !user) { console.error(`[Bot] User ${userId} not found for payment!`); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.").catch(logReplyError); return; } const now = new Date(); let currentSubEnd = user.subscription_end ? new Date(user.subscription_end) : now; if (currentSubEnd < now) currentSubEnd = now; const newSubEndDate = new Date(currentSubEnd.setMonth(currentSubEnd.getMonth() + durationMonths)); let tokensToAdd = 0; if (plan === 'basic') tokensToAdd = 15; else if (plan === 'premium') tokensToAdd = 30; const currentTokens = user.tokens || 0; const newTokens = currentTokens + tokensToAdd; console.log(`[Bot] Updating tokens for ${userId}: Current=${currentTokens}, Add=${tokensToAdd}, New=${newTokens}`); const { error: updateError } = await supabaseAdmin.from('users').update({ subscription_type: plan, subscription_end: newSubEndDate.toISOString(), tokens: newTokens }).eq('id', user.id); if (updateError) { console.error(`[Bot] DB update failed for ${userId}:`, updateError); throw new Error("DB update failed"); } console.log(`[Bot] User ${userId} updated: Plan=${plan}, Ends=${newSubEndDate.toISOString()}, Tokens=${newTokens}`); await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${newSubEndDate.toLocaleDateString()}. ${tokensToAdd > 0 ? `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${tokensToAdd} —Ç–æ–∫–µ–Ω–æ–≤.` : ''}`).catch(logReplyError); } catch (error) { console.error(`[Bot] Failed process payment for ${userId}:`, error); await ctx.reply("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.").catch(logReplyError); }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ grammy
bot.catch((err) => {
    const ctx = err.ctx;
    const e = err.error;
    console.error(`[Bot Global Error Handler] Error for update ${ctx.update.update_id}:`);
    if (e instanceof GrammyError) {
        console.error("GrammyError:", e.description, e.payload ? JSON.stringify(e.payload) : '');
    } else if (e instanceof HttpError) {
        console.error("HttpError:", e);
    } else {
        console.error("Unknown error:", e);
    }
    // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–¥–µ—Å—å, —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ü–∏–∫–ª –æ—à–∏–±–æ–∫
});

console.log("[Bot Global Init] Handlers configured successfully.");

// --- –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Netlify ---
// –ê–¥–∞–ø—Ç–µ—Ä —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç event –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–π response
exports.handler = webhookCallback(bot, "http"); // <<<--- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–ê–ü–¢–ï–†

console.log("[Bot Global Init] Netlify handler exported using webhookCallback.");
