// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ) ---

async function getOrCreateUser(supabase, userId) {
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        let { data: existingUser, error: selectError } = await supabase
            .from('users').select('id').eq('tg_id', userId).single();
        if (selectError && selectError.code !== 'PGRST116') throw selectError;
        if (existingUser) return existingUser.id;
        else {
            const { data: newUser, error: insertError } = await supabase
                .from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 1 }).select('id').single();
            if (insertError) throw insertError;
            if (!newUser) throw new Error("User creation returned no data.");
            console.log(`Created new user: tg_id=${userId}, id=${newUser.id}`);
            return newUser.id;
        }
    } catch (error) {
        console.error(`Error in getOrCreateUser for ${userId}:`, error.message); return null;
    }
}

async function getGeminiAnalysis(geminiModel, dreamText) {
    // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –û–±–µ—Ä–Ω–µ–º –≤—ã–∑–æ–≤ Gemini –≤ try-catch –∑–¥–µ—Å—å –∂–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É ---
    if (!geminiModel) {
         console.error("Gemini model is null or undefined in getGeminiAnalysis.");
         return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
    }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;

    try {
        console.log("Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º generateContentAsync –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ (—Ö–æ—Ç—è –∑–¥–µ—Å—å –º—ã –∂–¥–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç)
        // –≠—Ç–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response; // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

        if (response.promptFeedback?.blockReason) {
            console.warn(`Gemini blocked: ${response.promptFeedback.blockReason}`);
            return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.`;
        }
        const analysisText = response.text(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if (!analysisText || analysisText.trim().length === 0) {
            console.error("Gemini returned empty response.");
            // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤–æ–æ–±—â–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏)
            if (!response.candidates || response.candidates.length === 0) {
                 console.error("Gemini response candidates array is empty or missing.");
            } else {
                 console.log("Gemini response candidates:", JSON.stringify(response.candidates));
            }
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞).";
        }
        console.log("Gemini analysis received successfully.");
        return analysisText;
    } catch (error) {
        console.error("Error explicitly caught in getGeminiAnalysis:", error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Google AI
         if (error.message && error.message.includes("API key not valid")) {
            return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞.";
        } else if (error.status === 404 || (error.message && error.message.includes("404"))) {
             return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.";
        }
        // –û–±—â–∞—è –æ—à–∏–±–∫–∞
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
}


async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        userDbId = await getOrCreateUser(supabase, userId);
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(logReplyError); return; }
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId });
        if (rpcError) throw new Error(`RPC Error: ${rpcError.message}`);
        if (!tokenDecremented) {
            if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(logReplyError);
            await ctx.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError); return;
        }
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError); }

        // –í—ã–∑—ã–≤–∞–µ–º Gemini
        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText); // <<<--- –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message:", e)); processingMessage = null; }

        // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è getGeminiAnalysis –°–¢–†–û–ö–£ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ ---
        const isErrorResult = typeof analysisResult !== 'string' || // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–µ—Ä–Ω–µ—Ç –Ω–µ —Å—Ç—Ä–æ–∫—É
                             ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));

        if (isErrorResult) {
            // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª–∞ getGeminiAnalysis
            await ctx.reply(analysisResult || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError);
            console.warn(`Analysis for ${userId} failed or blocked, token consumed. Reason: ${analysisResult}`);
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω (analysisResult —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞)
        const { error: insertError } = await supabase
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });

        if (insertError) {
            console.error(`Error saving analysis for user_id ${userDbId}:`, insertError);
            await ctx.reply("–°–æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é. –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + analysisResult).catch(logReplyError);
            // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã –∏ –∑–¥–µ—Å—å ---
             await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError);
            return;
        }

        console.log(`Analysis for ${userId} successful.`);
        // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –£–ª—É—á—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ ---
        await ctx.reply(`–í–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞:\n\n${analysisResult}\n\n–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`, {
            reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
        }).catch(logReplyError);

    } catch (error) {
        console.error(`Critical error in analyzeDream for ${userId}:`, error);
         if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => console.warn("Could not delete status message on error:", e)); }
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–Ω–∞.").catch(logReplyError);
    }
}

function logReplyError(error) { console.error("Failed to send message to Telegram:", error); }


// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("Handler invoked.");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY) { /*...*/ console.error("FATAL: Missing required environment variables!"); return { statusCode: 500, body: "Internal Server Error: Configuration missing." }; }
    if (!event.body) { /*...*/ console.warn("Handler called without event body."); return { statusCode: 400, body: "Bad Request: Missing event body" }; }
    let update; try { update = JSON.parse(event.body); } catch (e) { /*...*/ console.error("Failed to parse event body:", e); return { statusCode: 400, body: "Bad Request: Invalid JSON" }; }

    let supabase; let geminiModel; let bot;
    try {
        console.log("Initializing clients inside handler...");
        supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'gemini-1.0-pro' ---
        geminiModel = genAI.getGenerativeModel({ model: "gemini-1.0-pro" });
        console.log("Using Gemini model: gemini-1.0-pro"); // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –º–æ–¥–µ–ª—å
        bot = new Bot(BOT_TOKEN);
        console.log("Bot instance created. Calling bot.init()...");
        await bot.init();
        console.log("bot.init() successful. Bot info:", bot.botInfo);
    } catch (initError) {
        console.error("FATAL: Failed to initialize clients or bot.init() failed:", initError);
         // <<<--- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini ---
         if (initError.message && initError.message.includes("Fetching model")) {
              console.error("Specific error: Could not fetch the specified Gemini model. Check model name and API key permissions.");
              return { statusCode: 500, body: "Internal Server Error: Failed to configure AI model." };
         }
        return { statusCode: 500, body: "Internal Server Error: Bot initialization failed." };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    console.log("Setting up bot handlers...");
    bot.command("start", async (ctx) => {
        const userId = ctx.from?.id; if (!userId) return; console.log(`User ${userId} started bot.`);
        try {
            await getOrCreateUser(supabase, userId);
            await ctx.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –°–Ω–æ–≤! ‚ú®\n\n" +
                "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ —Ä–∞—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å (—É –≤–∞—Å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑).\n\n" +
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤ üëá", {
                reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", web_app: { url: TMA_URL } }]] } : undefined
            }).catch(logReplyError);
        } catch (e) { console.error("Error in /start handler:", e); await ctx.reply("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError); }
    });
    bot.on("message:text", async (ctx) => {
         const dreamText = ctx.message.text; const userId = ctx.from?.id; if (!userId) return;
         if (dreamText.startsWith('/')) { console.log(`Ignoring command: ${dreamText}`); return; }
         console.log(`Received text from ${userId}: "${dreamText.substring(0, 50)}..."`);
         await analyzeDream(ctx, supabase, geminiModel, dreamText); // –ü–µ—Ä–µ–¥–∞–µ–º geminiModel
    });
    bot.catch((err) => {
        const ctx = err.ctx; const e = err.error; console.error(`Error caught by bot.catch for update ${ctx.update.update_id}:`);
        if (e instanceof GrammyError) console.error("GrammyError:", e.description, e.payload);
        else if (e instanceof HttpError) console.error("HttpError:", e);
        else if (e instanceof Error) console.error("Error:", e.stack || e.message);
        else console.error("Unknown error object:", e);
    });
    console.log("Bot handlers configured.");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try {
        console.log("Passing update to bot.handleUpdate...");
        await bot.handleUpdate(update);
        console.log("bot.handleUpdate finished.");
        return { statusCode: 200, body: "" };
    } catch (error) {
        console.error("Error during bot.handleUpdate call:", error);
        return { statusCode: 500, body: "Internal Server Error during update processing." };
    }
};

console.log("Netlify function bot.js (handler-init + bot.init() + gemini-2.0-flash) loaded.");
