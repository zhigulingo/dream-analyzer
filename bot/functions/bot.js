// bot/functions/bot.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–æ–≤—ã–µ —é–∑–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç 0 —Ç–æ–∫–µ–Ω–æ–≤)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TMA_URL = process.env.TMA_URL; // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è TMA

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
async function getOrCreateUser(supabase, userId) {
    if (!supabase) throw new Error("Supabase client not available in getOrCreateUser.");
    try {
        // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let { data: existingUser, error: selectError } = await supabase
            .from('users')
            .select('id, tokens') // –í—ã–±–∏—Ä–∞–µ–º –∏ ID, –∏ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ª–æ–≥–∞
            .eq('tg_id', userId)
            .single();

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" (PGRST116), —Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ
        if (selectError && selectError.code !== 'PGRST116') {
            console.error(`[Bot:getOrCreateUser] Error selecting user ${userId}:`, selectError);
            throw selectError;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID
        if (existingUser) {
            console.log(`[Bot:getOrCreateUser] Existing user found: tg_id=${userId}, id=${existingUser.id}, tokens=${existingUser.tokens}`);
            return existingUser.id;
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (selectError.code === 'PGRST116' –∏–ª–∏ !existingUser)
        else {
            console.log(`[Bot:getOrCreateUser] User ${userId} not found. Creating...`);
            // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 0 —Ç–æ–∫–µ–Ω–∞–º–∏
            const { data: newUser, error: insertError } = await supabase
                .from('users')
                .insert({
                    tg_id: userId,
                    subscription_type: 'free',
                    tokens: 0, // <<<--- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∏–Ω–∞–µ–º —Å 0 —Ç–æ–∫–µ–Ω–æ–≤
                    channel_reward_claimed: false // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ —Ç–æ–∂–µ false
                })
                .select('id') // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                .single(); // –û–∂–∏–¥–∞–µ–º –æ–¥–Ω—É —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
            if (insertError) {
                console.error(`[Bot:getOrCreateUser] Error inserting new user ${userId}:`, insertError);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞–ª —é–∑–µ—Ä–∞ –º–µ–∂–¥—É SELECT –∏ INSERT)
                if (insertError.code === '23505') { // Unique constraint violation
                     console.warn(`[Bot:getOrCreateUser] Race condition likely for user ${userId}. Trying to fetch again.`);
                     // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                     let { data: raceUser, error: raceError } = await supabase.from('users').select('id').eq('tg_id', userId).single();
                     if (raceError) throw raceError; // –ï—Å–ª–∏ –∏ —Ç—É—Ç –æ—à–∏–±–∫–∞, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ä—å–µ–∑–Ω–µ–µ
                     if (raceUser) return raceUser.id; // –í–µ—Ä–Ω—É—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                }
                throw insertError; // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ
            }

            // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
            if (!newUser) {
                throw new Error("User creation successful but returned no data.");
            }

            console.log(`[Bot:getOrCreateUser] Created new user: tg_id=${userId}, id=${newUser.id}, initial tokens=0`);
            return newUser.id;
        }
    } catch (error) {
        // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è getOrCreateUser
        console.error(`[Bot:getOrCreateUser] Critical error for user ${userId}:`, error.message);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–Ω–∞–ª–∞ –æ–± –æ—à–∏–±–∫–µ
    }
}


// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
async function getGeminiAnalysis(geminiModel, dreamText) {
    if (!geminiModel) { console.error("[Bot] Gemini model is null or undefined in getGeminiAnalysis."); return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."; }
    const MAX_DREAM_LENGTH = 4000;
    if (!dreamText || dreamText.trim().length === 0) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω.";
    if (dreamText.length > MAX_DREAM_LENGTH) return `–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.`;
    try {
        console.log("[Bot] Requesting Gemini analysis...");
        const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
        const result = await geminiModel.generateContent(prompt);
        const response = await result.response;
        if (response.promptFeedback?.blockReason) { console.warn(`[Bot] Gemini blocked: ${response.promptFeedback.blockReason}`); return `–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${response.promptFeedback.blockReason}).`; }
        const analysisText = response.text();
        if (!analysisText || analysisText.trim().length === 0) { console.error("[Bot] Gemini returned empty response."); return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)."; }
        console.log("[Bot] Gemini analysis received successfully.");
        return analysisText;
    } catch (error) {
        console.error("[Bot] Error explicitly caught in getGeminiAnalysis:", error);
         if (error.message?.includes("API key not valid")) { return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API."; }
         else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) { return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."; }
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞.";
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
async function analyzeDream(ctx, supabase, geminiModel, dreamText) {
    const userId = ctx.from?.id;
    if (!userId) { await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").catch(logReplyError); return; }
    let userDbId; let processingMessage;
    try {
        userDbId = await getOrCreateUser(supabase, userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if (!userDbId) { await ctx.reply("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.").catch(logReplyError); return; }
        processingMessage = await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã...").catch(logReplyError);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º tg_id

        if (rpcError) { console.error(`[Bot:analyzeDream] RPC error for tg_id ${userId}:`, rpcError); throw new Error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.");}
        if (!tokenDecremented) {
             console.log(`[Bot:analyzeDream] Not enough tokens for ${userId}.`);
             if (processingMessage) await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {});
             // --- –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤ ---
             const noTokensMessage = "–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üòü\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.";
             const buttons = [];
             // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å TMA_URL
             if (TMA_URL) {
                 buttons.push([{ text: "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω", web_app: { url: `${TMA_URL}?action=claim_reward` } }]);
             }
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –õ–ö/–ü–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å TMA_URL
             if (TMA_URL) {
                  buttons.push([{ text: "üõí –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", web_app: { url: TMA_URL } }]);
             }
             await ctx.reply(noTokensMessage, { reply_markup: { inline_keyboard: buttons } }).catch(logReplyError);
             return;
        }

        console.log(`[Bot:analyzeDream] Token decremented for ${userId}.`);
        if (processingMessage) { await ctx.api.editMessageText(ctx.chat.id, processingMessage.message_id, "–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }
        else { await ctx.reply("–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üß†‚ú®").catch(logReplyError); }

        const analysisResult = await getGeminiAnalysis(geminiModel, dreamText);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); processingMessage = null; }

        const isErrorResult = typeof analysisResult !== 'string' || ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,", "–ò–∑–≤–∏–Ω–∏—Ç–µ,", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,", "–û—à–∏–±–∫–∞:", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"].some(prefix => analysisResult.startsWith(prefix));
        if (isErrorResult) { await ctx.reply(analysisResult || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.").catch(logReplyError); console.warn(`[Bot] Analysis failed for ${userId}, token consumed.`); return; }

        const { error: insertError } = await supabase
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResult });
        if (insertError) { console.error(`[Bot] Error saving analysis for ${userDbId}:`, insertError); await ctx.reply("–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n" + analysisResult).catch(logReplyError); return; }

        console.log(`[Bot] Analysis successful for ${userId}.`);
        await ctx.reply(`–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n\n${analysisResult}\n\n–¢–æ–∫–µ–Ω —Å–ø–∏—Å–∞–Ω. –ò—Å—Ç–æ—Ä–∏—è –≤ –õ–ö.`, { reply_markup: TMA_URL ? { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–ö", web_app: { url: TMA_URL } }]] } : undefined }).catch(logReplyError);

    } catch (error) {
        console.error(`[Bot] Critical error in analyzeDream for ${userId}:`, error.message);
        if (processingMessage) { await ctx.api.deleteMessage(ctx.chat.id, processingMessage.message_id).catch(e => {}); }
        await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
function logReplyError(error) { console.error("[Bot] Failed to send message to Telegram:", error); }

// --- –ì–ª–∞–≤–Ω—ã–π –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Netlify Function ---
exports.handler = async (event) => {
    console.log("[Bot] Handler invoked.");
    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TMA_URL ---
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
         console.error("[Bot] FATAL: Missing env vars (BOT_TOKEN, SUPABASE_*, GEMINI_API_KEY, TMA_URL)!");
         return { statusCode: 500, body: "Config missing." };
    }
    if (!event.body) { console.warn("[Bot] Empty event body."); return { statusCode: 400, body: "Bad Request" }; }
    let update; try { update = JSON.parse(event.body); } catch (e) { console.error("[Bot] Invalid JSON body:", e); return { statusCode: 400, body: "Invalid JSON" }; }

    let supabaseAdmin; let geminiModel; let bot;
    try {
        console.log("[Bot] Initializing clients...");
        supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∞–∫—Ç—É–∞–ª—å–Ω–∞
        bot = new Bot(BOT_TOKEN);
        // –ù–µ –Ω—É–∂–Ω–æ bot.init() –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞, grammY —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º
        // await bot.init();
        console.log("[Bot] Clients initialized.");
    } catch (initError) { console.error("[Bot] FATAL: Client init failed:", initError); return { statusCode: 500, body: "Init failed." }; }

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    bot.command("start", async (ctx) => {
        console.log("[Bot:Handler /start] Received /start command.");
        const userId = ctx.from?.id;
        if (!userId) { console.warn("[Bot:Handler /start] No user ID."); return; }
        console.log(`[Bot:Handler /start] User ${userId}`);

        try {
            // 1. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞—Å—Ç—Å—è —Å 0 —Ç–æ–∫–µ–Ω–∞–º–∏, –µ—Å–ª–∏ –Ω–æ–≤—ã–π)
            await getOrCreateUser(supabaseAdmin, userId);
            console.log(`[Bot:Handler /start] Ensured user ${userId} exists.`);

            // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ü–û–õ–£–ß–ï–ù–ò–Ø —Ç–æ–∫–µ–Ω–∞ –≤ TMA
            const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π **–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω** –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!";
            // URL –≤–µ–¥–µ—Ç –≤ TMA –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã TMA –∑–Ω–∞–ª–æ, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
            const buttonUrl = `${TMA_URL}?action=claim_reward`;

            await ctx.replyWithMarkdown(welcomeMessage, { // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è **
                reply_markup: {
                    inline_keyboard: [[{
                        text: "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω",
                        web_app: { url: buttonUrl }
                    }]]
                }
            }).catch(logReplyError);

             console.log(`[Bot:Handler /start] Welcome & 'Get Token' button sent to ${userId}.`);

        } catch (e) {
            console.error("[Bot:Handler /start] Error ensuring user or sending message:", e);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.").catch(logReplyError);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    bot.on("message:text", async (ctx) => {
         console.log("[Bot:Handler text] Received text message.");
         const dreamText = ctx.message.text; const userId = ctx.from?.id; if (!userId) return;
         // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
         if (dreamText.startsWith('/')) { console.log(`[Bot:Handler text] Ignoring command: ${dreamText}`); return; }
         console.log(`[Bot:Handler text] Processing dream for ${userId}`);
         await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    bot.on('pre_checkout_query', async (ctx) => {
        console.log("[Bot:Handler pre_checkout_query] Received:", JSON.stringify(ctx.preCheckoutQuery));
        try {
            await ctx.answerPreCheckoutQuery(true);
            console.log("[Bot:Handler pre_checkout_query] Answered TRUE.");
        } catch (error) { console.error("[Bot:Handler pre_checkout_query] Failed to answer:", error); try { await ctx.answerPreCheckoutQuery(false, "Internal error"); } catch (e) {} }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    bot.on('message:successful_payment', async (ctx) => {
        console.log("[Bot:Handler successful_payment] Received:", JSON.stringify(ctx.message.successful_payment));
        const payment = ctx.message.successful_payment; const userId = ctx.from.id;
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ invoice_payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const payload = payment.invoice_payload;
        if (!payload) { console.error(`[Bot] Missing invoice_payload in successful_payment from user ${userId}`); return; }

        const parts = payload.split('_');
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ payload (sub_plan_duration_tgUserId)
        if (parts.length < 4 || parts[0] !== 'sub') { console.error(`[Bot] Invalid payload format: ${payload} from user ${userId}`); return; }

        const plan = parts[1];
        const durationMonths = parseInt(parts[2].replace('mo', ''), 10);
        const payloadUserId = parseInt(parts[3], 10);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ payload
        if (isNaN(durationMonths) || isNaN(payloadUserId) || payloadUserId !== userId) {
            console.error(`[Bot] Payload data error or mismatch: Payload=${payload}, Sender=${userId}`);
             // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
             await ctx.reply("–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã.").catch(logReplyError);
            return;
        }

        console.log(`[Bot] Processing payment for ${userId}: Plan=${plan}, Duration=${durationMonths}mo.`);
        try {
            if (!supabaseAdmin) { throw new Error("Supabase client unavailable"); } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const { error: txError } = await supabaseAdmin.rpc('process_successful_payment', {
                user_tg_id: userId,
                plan_type: plan,
                duration_months: durationMonths
            });

            if (txError) {
                 console.error(`[Bot] Error calling process_successful_payment RPC for ${userId}:`, txError);
                 throw new Error("Database update failed during payment processing.");
            }

            // RPC —Å–∞–º–∞ –≤—ã—á–∏—Å–ª–∏—Ç –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–∏—Ç —Ç–æ–∫–µ–Ω—ã
            console.log(`[Bot] Successfully processed payment via RPC for user ${userId}. Plan=${plan}, Duration=${durationMonths}mo`);
            await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.toUpperCase()}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞. –¢–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤! ‚ú®`).catch(logReplyError);

        } catch (error) {
            console.error(`[Bot] Failed to process payment for ${userId}:`, error);
            await ctx.reply("–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.").catch(logReplyError);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    bot.catch((err) => {
        const ctx = err.ctx; const e = err.error;
        console.error(`[Bot] Error caught by bot.catch for update ${ctx?.update?.update_id}:`);
        if (e instanceof GrammyError) console.error("GrammyError:", e.description, e.payload);
        else if (e instanceof HttpError) console.error("HttpError:", e);
        else if (e instanceof Error) console.error("Error:", e.stack || e.message); // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        else console.error("Unknown error object:", e);
    });

    console.log("[Bot] Handlers configured.");

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    try {
        console.log("[Bot] Passing update to bot.handleUpdate...");
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Netlify
        await bot.handleUpdate(update);
        console.log("[Bot] bot.handleUpdate finished.");
        return { statusCode: 200, body: "" };
    } catch (error) {
        // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞, —Ç.–∫. bot.catch –¥–æ–ª–∂–µ–Ω –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        console.error("[Bot] Error during bot.handleUpdate call:", error);
        return { statusCode: 500, body: "Internal Server Error during update processing." };
    }
};

// --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê bot.js ---
