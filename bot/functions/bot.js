const { Telegraf } = require('telegraf');
const axios = require('axios');
const { getUser, createUser, createAnalysis } = require('../src/database');

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
  ctx.reply('üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dream Analyzer!*', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            web_app: { url: 'https://tourmaline-eclair-9d40ea.netlify.app' },
          },
        ],
      ],
    },
  });
});

bot.on('text', async (ctx) => {
  const tgId = ctx.from.id;
  const dreamText = ctx.message.text;

  let user = await getUser(tgId);
  if (!user) {
    user = await createUser(tgId);
    if (!user) {
      return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (!user.tokens || user.tokens <= 0) {
    return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
  }

  ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω...');

  try {
    const response = await axios.post('https://api.openai.com/v1/completions', {
      model: 'text-davinci-003',
      prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω: "${dreamText}". –û–±—ä—è—Å–Ω–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.`,
      max_tokens: 500,
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
    });

    const analysis = response.data.choices[0].text.trim();
    const analysisRecord = await createAnalysis(user.id, dreamText, analysis);
    if (!analysisRecord) {
      return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    user.tokens -= 1;
    const { error } = await supabase.from('users').update({ tokens: user.tokens }).eq('id', user.id);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    ctx.reply(`‚ú® *–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞:*\n\n${analysis}`, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞:', err.message);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}); bot.on('web_app_data', async (ctx) => {
  const tariff = ctx.webAppData.data; // 'basic' –∏–ª–∏ 'premium'
  const tgId = ctx.from.id;

  let user = await getUser(tgId);
  if (!user) {
    return ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  const prices = {
    basic: { tokens: 15, stars: 30 },
    premium: { tokens: 30, stars: 90 },
  };

  const selectedTariff = prices[tariff];
  if (!selectedTariff) {
    return ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  }

  try {
    await ctx.replyWithInvoice(
      `–¢–∞—Ä–∏—Ñ ${tariff.charAt(0).toUpperCase() + tariff.slice(1)}`,
      `–ü–æ–ª—É—á–∏—Ç–µ ${selectedTariff.tokens} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ ${selectedTariff.stars} Stars`,
      JSON.stringify({ tariff, tgId }),
      process.env.PAYMENT_PROVIDER_TOKEN,
      'XTR',
      [
        { label: `–¢–∞—Ä–∏—Ñ ${tariff}`, amount: selectedTariff.stars },
      ]
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞:', err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true));

bot.on('successful_payment', async (ctx) => {
  const { tariff, tgId } = JSON.parse(ctx.message.successful_payment.invoice_payload);
  const prices = {
    basic: { tokens: 15 },
    premium: { tokens: 30 },
  };

  const selectedTariff = prices[tariff];
  if (!selectedTariff) {
    return ctx.reply('–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  const user = await getUser(tgId);
  if (!user) {
    return ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  const { error } = await supabase
    .from('users')
    .update({ subscription_type: tariff, tokens: user.tokens + selectedTariff.tokens })
    .eq('tg_id', tgId);
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error);
    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.reply(`–¢–∞—Ä–∏—Ñ ${tariff} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å ${user.tokens + selectedTariff.tokens} —Ç–æ–∫–µ–Ω–æ–≤.`);
});

bot.launch();
module.exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body);
    await bot.handleUpdate(body);
    return { statusCode: 200, body: 'OK' };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
    return { statusCode: 500, body: 'Error' };
  }
};
